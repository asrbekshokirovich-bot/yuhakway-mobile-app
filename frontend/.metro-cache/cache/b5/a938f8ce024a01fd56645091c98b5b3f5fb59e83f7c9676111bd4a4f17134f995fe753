{"dependencies":[{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[0], \"./PostgrestFilterBuilder\"));\n  class PostgrestQueryBuilder {\n    constructor(url, {\n      headers = {},\n      schema,\n      fetch\n    }) {\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, options) {\n      const {\n        head = false,\n        count\n      } = options !== null && options !== void 0 ? options : {};\n      const method = head ? 'HEAD' : 'GET';\n      // Remove whitespaces except when quoted\n      let quoted = false;\n      const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, {\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', `missing=default`);\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true\n    } = {}) {\n      var _a;\n      const method = 'POST';\n      this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      if (!defaultToNull) {\n        this.headers.append('Prefer', 'missing=default');\n      }\n      if (Array.isArray(values)) {\n        const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n        if (columns.length > 0) {\n          const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, {\n      count\n    } = {}) {\n      var _a;\n      const method = 'PATCH';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({\n      count\n    } = {}) {\n      var _a;\n      const method = 'DELETE';\n      if (count) {\n        this.headers.append('Prefer', `count=${count}`);\n      }\n      return new PostgrestFilterBuilder_1.default({\n        method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n      });\n    }\n  }\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":273,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,8,6,6,"PostgrestFilterBuilder_1"],[12,32,6,30],[12,35,6,33,"__importDefault"],[12,50,6,48],[12,51,6,49,"require"],[12,58,6,56],[12,59,6,56,"_dependencyMap"],[12,73,6,56],[12,104,6,83],[12,105,6,84],[12,106,6,85],[13,2,7,0],[13,8,7,6,"PostgrestQueryBuilder"],[13,29,7,27],[13,30,7,28],[14,4,8,4,"constructor"],[14,15,8,15,"constructor"],[14,16,8,16,"url"],[14,19,8,19],[14,21,8,21],[15,6,8,23,"headers"],[15,13,8,30],[15,16,8,33],[15,17,8,34],[15,18,8,35],[16,6,8,37,"schema"],[16,12,8,43],[17,6,8,45,"fetch"],[18,4,8,52],[18,5,8,53],[18,7,8,55],[19,6,9,8],[19,10,9,12],[19,11,9,13,"url"],[19,14,9,16],[19,17,9,19,"url"],[19,20,9,22],[20,6,10,8],[20,10,10,12],[20,11,10,13,"headers"],[20,18,10,20],[20,21,10,23],[20,25,10,27,"Headers"],[20,32,10,34],[20,33,10,35,"headers"],[20,40,10,42],[20,41,10,43],[21,6,11,8],[21,10,11,12],[21,11,11,13,"schema"],[21,17,11,19],[21,20,11,22,"schema"],[21,26,11,28],[22,6,12,8],[22,10,12,12],[22,11,12,13,"fetch"],[22,16,12,18],[22,19,12,21,"fetch"],[22,24,12,26],[23,4,13,4],[24,4,14,4],[25,0,15,0],[26,0,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,0,21,0],[32,0,22,0],[33,0,23,0],[34,0,24,0],[35,0,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,0,33,0],[44,0,34,0],[45,4,35,4,"select"],[45,10,35,10,"select"],[45,11,35,11,"columns"],[45,18,35,18],[45,20,35,20,"options"],[45,27,35,27],[45,29,35,29],[46,6,36,8],[46,12,36,14],[47,8,36,16,"head"],[47,12,36,20],[47,15,36,23],[47,20,36,28],[48,8,36,30,"count"],[49,6,36,36],[49,7,36,37],[49,10,36,40,"options"],[49,17,36,47],[49,22,36,52],[49,26,36,56],[49,30,36,60,"options"],[49,37,36,67],[49,42,36,72],[49,47,36,77],[49,48,36,78],[49,51,36,81,"options"],[49,58,36,88],[49,61,36,91],[49,62,36,92],[49,63,36,93],[50,6,37,8],[50,12,37,14,"method"],[50,18,37,20],[50,21,37,23,"head"],[50,25,37,27],[50,28,37,30],[50,34,37,36],[50,37,37,39],[50,42,37,44],[51,6,38,8],[52,6,39,8],[52,10,39,12,"quoted"],[52,16,39,18],[52,19,39,21],[52,24,39,26],[53,6,40,8],[53,12,40,14,"cleanedColumns"],[53,26,40,28],[53,29,40,31],[53,30,40,32,"columns"],[53,37,40,39],[53,42,40,44],[53,46,40,48],[53,50,40,52,"columns"],[53,57,40,59],[53,62,40,64],[53,67,40,69],[53,68,40,70],[53,71,40,73,"columns"],[53,78,40,80],[53,81,40,83],[53,84,40,86],[53,86,41,13,"split"],[53,91,41,18],[53,92,41,19],[53,94,41,21],[53,95,41,22],[53,96,42,13,"map"],[53,99,42,16],[53,100,42,18,"c"],[53,101,42,19],[53,105,42,24],[54,8,43,12],[54,12,43,16],[54,16,43,20],[54,17,43,21,"test"],[54,21,43,25],[54,22,43,26,"c"],[54,23,43,27],[54,24,43,28],[54,28,43,32],[54,29,43,33,"quoted"],[54,35,43,39],[54,37,43,41],[55,10,44,16],[55,17,44,23],[55,19,44,25],[56,8,45,12],[57,8,46,12],[57,12,46,16,"c"],[57,13,46,17],[57,18,46,22],[57,21,46,25],[57,23,46,27],[58,10,47,16,"quoted"],[58,16,47,22],[58,19,47,25],[58,20,47,26,"quoted"],[58,26,47,32],[59,8,48,12],[60,8,49,12],[60,15,49,19,"c"],[60,16,49,20],[61,6,50,8],[61,7,50,9],[61,8,50,10],[61,9,51,13,"join"],[61,13,51,17],[61,14,51,18],[61,16,51,20],[61,17,51,21],[62,6,52,8],[62,10,52,12],[62,11,52,13,"url"],[62,14,52,16],[62,15,52,17,"searchParams"],[62,27,52,29],[62,28,52,30,"set"],[62,31,52,33],[62,32,52,34],[62,40,52,42],[62,42,52,44,"cleanedColumns"],[62,56,52,58],[62,57,52,59],[63,6,53,8],[63,10,53,12,"count"],[63,15,53,17],[63,17,53,19],[64,8,54,12],[64,12,54,16],[64,13,54,17,"headers"],[64,20,54,24],[64,21,54,25,"append"],[64,27,54,31],[64,28,54,32],[64,36,54,40],[64,38,54,42],[64,47,54,51,"count"],[64,52,54,56],[64,54,54,58],[64,55,54,59],[65,6,55,8],[66,6,56,8],[66,13,56,15],[66,17,56,19,"PostgrestFilterBuilder_1"],[66,41,56,43],[66,42,56,44,"default"],[66,49,56,51],[66,50,56,52],[67,8,57,12,"method"],[67,14,57,18],[68,8,58,12,"url"],[68,11,58,15],[68,13,58,17],[68,17,58,21],[68,18,58,22,"url"],[68,21,58,25],[69,8,59,12,"headers"],[69,15,59,19],[69,17,59,21],[69,21,59,25],[69,22,59,26,"headers"],[69,29,59,33],[70,8,60,12,"schema"],[70,14,60,18],[70,16,60,20],[70,20,60,24],[70,21,60,25,"schema"],[70,27,60,31],[71,8,61,12,"fetch"],[71,13,61,17],[71,15,61,19],[71,19,61,23],[71,20,61,24,"fetch"],[72,6,62,8],[72,7,62,9],[72,8,62,10],[73,4,63,4],[74,4,64,4],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,0,69,0],[80,0,70,0],[81,0,71,0],[82,0,72,0],[83,0,73,0],[84,0,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,0,84,0],[95,0,85,0],[96,0,86,0],[97,0,87,0],[98,0,88,0],[99,0,89,0],[100,4,90,4,"insert"],[100,10,90,10,"insert"],[100,11,90,11,"values"],[100,17,90,17],[100,19,90,19],[101,6,90,21,"count"],[101,11,90,26],[102,6,90,28,"defaultToNull"],[102,19,90,41],[102,22,90,44],[103,4,90,50],[103,5,90,51],[103,8,90,54],[103,9,90,55],[103,10,90,56],[103,12,90,58],[104,6,91,8],[104,10,91,12,"_a"],[104,12,91,14],[105,6,92,8],[105,12,92,14,"method"],[105,18,92,20],[105,21,92,23],[105,27,92,29],[106,6,93,8],[106,10,93,12,"count"],[106,15,93,17],[106,17,93,19],[107,8,94,12],[107,12,94,16],[107,13,94,17,"headers"],[107,20,94,24],[107,21,94,25,"append"],[107,27,94,31],[107,28,94,32],[107,36,94,40],[107,38,94,42],[107,47,94,51,"count"],[107,52,94,56],[107,54,94,58],[107,55,94,59],[108,6,95,8],[109,6,96,8],[109,10,96,12],[109,11,96,13,"defaultToNull"],[109,24,96,26],[109,26,96,28],[110,8,97,12],[110,12,97,16],[110,13,97,17,"headers"],[110,20,97,24],[110,21,97,25,"append"],[110,27,97,31],[110,28,97,32],[110,36,97,40],[110,38,97,42],[110,55,97,59],[110,56,97,60],[111,6,98,8],[112,6,99,8],[112,10,99,12,"Array"],[112,15,99,17],[112,16,99,18,"isArray"],[112,23,99,25],[112,24,99,26,"values"],[112,30,99,32],[112,31,99,33],[112,33,99,35],[113,8,100,12],[113,14,100,18,"columns"],[113,21,100,25],[113,24,100,28,"values"],[113,30,100,34],[113,31,100,35,"reduce"],[113,37,100,41],[113,38,100,42],[113,39,100,43,"acc"],[113,42,100,46],[113,44,100,48,"x"],[113,45,100,49],[113,50,100,54,"acc"],[113,53,100,57],[113,54,100,58,"concat"],[113,60,100,64],[113,61,100,65,"Object"],[113,67,100,71],[113,68,100,72,"keys"],[113,72,100,76],[113,73,100,77,"x"],[113,74,100,78],[113,75,100,79],[113,76,100,80],[113,78,100,82],[113,80,100,84],[113,81,100,85],[114,8,101,12],[114,12,101,16,"columns"],[114,19,101,23],[114,20,101,24,"length"],[114,26,101,30],[114,29,101,33],[114,30,101,34],[114,32,101,36],[115,10,102,16],[115,16,102,22,"uniqueColumns"],[115,29,102,35],[115,32,102,38],[115,33,102,39],[115,36,102,42],[115,40,102,46,"Set"],[115,43,102,49],[115,44,102,50,"columns"],[115,51,102,57],[115,52,102,58],[115,53,102,59],[115,54,102,60,"map"],[115,57,102,63],[115,58,102,65,"column"],[115,64,102,71],[115,68,102,76],[115,72,102,80,"column"],[115,78,102,86],[115,81,102,89],[115,82,102,90],[116,10,103,16],[116,14,103,20],[116,15,103,21,"url"],[116,18,103,24],[116,19,103,25,"searchParams"],[116,31,103,37],[116,32,103,38,"set"],[116,35,103,41],[116,36,103,42],[116,45,103,51],[116,47,103,53,"uniqueColumns"],[116,60,103,66],[116,61,103,67,"join"],[116,65,103,71],[116,66,103,72],[116,69,103,75],[116,70,103,76],[116,71,103,77],[117,8,104,12],[118,6,105,8],[119,6,106,8],[119,13,106,15],[119,17,106,19,"PostgrestFilterBuilder_1"],[119,41,106,43],[119,42,106,44,"default"],[119,49,106,51],[119,50,106,52],[120,8,107,12,"method"],[120,14,107,18],[121,8,108,12,"url"],[121,11,108,15],[121,13,108,17],[121,17,108,21],[121,18,108,22,"url"],[121,21,108,25],[122,8,109,12,"headers"],[122,15,109,19],[122,17,109,21],[122,21,109,25],[122,22,109,26,"headers"],[122,29,109,33],[123,8,110,12,"schema"],[123,14,110,18],[123,16,110,20],[123,20,110,24],[123,21,110,25,"schema"],[123,27,110,31],[124,8,111,12,"body"],[124,12,111,16],[124,14,111,18,"values"],[124,20,111,24],[125,8,112,12,"fetch"],[125,13,112,17],[125,15,112,19],[125,16,112,20,"_a"],[125,18,112,22],[125,21,112,25],[125,25,112,29],[125,26,112,30,"fetch"],[125,31,112,35],[125,37,112,41],[125,41,112,45],[125,45,112,49,"_a"],[125,47,112,51],[125,52,112,56],[125,57,112,61],[125,58,112,62],[125,61,112,65,"_a"],[125,63,112,67],[125,66,112,70,"fetch"],[126,6,113,8],[126,7,113,9],[126,8,113,10],[127,4,114,4],[128,4,115,4],[129,0,116,0],[130,0,117,0],[131,0,118,0],[132,0,119,0],[133,0,120,0],[134,0,121,0],[135,0,122,0],[136,0,123,0],[137,0,124,0],[138,0,125,0],[139,0,126,0],[140,0,127,0],[141,0,128,0],[142,0,129,0],[143,0,130,0],[144,0,131,0],[145,0,132,0],[146,0,133,0],[147,0,134,0],[148,0,135,0],[149,0,136,0],[150,0,137,0],[151,0,138,0],[152,0,139,0],[153,0,140,0],[154,0,141,0],[155,0,142,0],[156,0,143,0],[157,0,144,0],[158,0,145,0],[159,0,146,0],[160,0,147,0],[161,0,148,0],[162,0,149,0],[163,0,150,0],[164,0,151,0],[165,0,152,0],[166,4,153,4,"upsert"],[166,10,153,10,"upsert"],[166,11,153,11,"values"],[166,17,153,17],[166,19,153,19],[167,6,153,21,"onConflict"],[167,16,153,31],[168,6,153,33,"ignoreDuplicates"],[168,22,153,49],[168,25,153,52],[168,30,153,57],[169,6,153,59,"count"],[169,11,153,64],[170,6,153,66,"defaultToNull"],[170,19,153,79],[170,22,153,82],[171,4,153,88],[171,5,153,89],[171,8,153,92],[171,9,153,93],[171,10,153,94],[171,12,153,96],[172,6,154,8],[172,10,154,12,"_a"],[172,12,154,14],[173,6,155,8],[173,12,155,14,"method"],[173,18,155,20],[173,21,155,23],[173,27,155,29],[174,6,156,8],[174,10,156,12],[174,11,156,13,"headers"],[174,18,156,20],[174,19,156,21,"append"],[174,25,156,27],[174,26,156,28],[174,34,156,36],[174,36,156,38],[174,50,156,52,"ignoreDuplicates"],[174,66,156,68],[174,69,156,71],[174,77,156,79],[174,80,156,82],[174,87,156,89],[174,100,156,102],[174,101,156,103],[175,6,157,8],[175,10,157,12,"onConflict"],[175,20,157,22],[175,25,157,27,"undefined"],[175,34,157,36],[175,36,158,12],[175,40,158,16],[175,41,158,17,"url"],[175,44,158,20],[175,45,158,21,"searchParams"],[175,57,158,33],[175,58,158,34,"set"],[175,61,158,37],[175,62,158,38],[175,75,158,51],[175,77,158,53,"onConflict"],[175,87,158,63],[175,88,158,64],[176,6,159,8],[176,10,159,12,"count"],[176,15,159,17],[176,17,159,19],[177,8,160,12],[177,12,160,16],[177,13,160,17,"headers"],[177,20,160,24],[177,21,160,25,"append"],[177,27,160,31],[177,28,160,32],[177,36,160,40],[177,38,160,42],[177,47,160,51,"count"],[177,52,160,56],[177,54,160,58],[177,55,160,59],[178,6,161,8],[179,6,162,8],[179,10,162,12],[179,11,162,13,"defaultToNull"],[179,24,162,26],[179,26,162,28],[180,8,163,12],[180,12,163,16],[180,13,163,17,"headers"],[180,20,163,24],[180,21,163,25,"append"],[180,27,163,31],[180,28,163,32],[180,36,163,40],[180,38,163,42],[180,55,163,59],[180,56,163,60],[181,6,164,8],[182,6,165,8],[182,10,165,12,"Array"],[182,15,165,17],[182,16,165,18,"isArray"],[182,23,165,25],[182,24,165,26,"values"],[182,30,165,32],[182,31,165,33],[182,33,165,35],[183,8,166,12],[183,14,166,18,"columns"],[183,21,166,25],[183,24,166,28,"values"],[183,30,166,34],[183,31,166,35,"reduce"],[183,37,166,41],[183,38,166,42],[183,39,166,43,"acc"],[183,42,166,46],[183,44,166,48,"x"],[183,45,166,49],[183,50,166,54,"acc"],[183,53,166,57],[183,54,166,58,"concat"],[183,60,166,64],[183,61,166,65,"Object"],[183,67,166,71],[183,68,166,72,"keys"],[183,72,166,76],[183,73,166,77,"x"],[183,74,166,78],[183,75,166,79],[183,76,166,80],[183,78,166,82],[183,80,166,84],[183,81,166,85],[184,8,167,12],[184,12,167,16,"columns"],[184,19,167,23],[184,20,167,24,"length"],[184,26,167,30],[184,29,167,33],[184,30,167,34],[184,32,167,36],[185,10,168,16],[185,16,168,22,"uniqueColumns"],[185,29,168,35],[185,32,168,38],[185,33,168,39],[185,36,168,42],[185,40,168,46,"Set"],[185,43,168,49],[185,44,168,50,"columns"],[185,51,168,57],[185,52,168,58],[185,53,168,59],[185,54,168,60,"map"],[185,57,168,63],[185,58,168,65,"column"],[185,64,168,71],[185,68,168,76],[185,72,168,80,"column"],[185,78,168,86],[185,81,168,89],[185,82,168,90],[186,10,169,16],[186,14,169,20],[186,15,169,21,"url"],[186,18,169,24],[186,19,169,25,"searchParams"],[186,31,169,37],[186,32,169,38,"set"],[186,35,169,41],[186,36,169,42],[186,45,169,51],[186,47,169,53,"uniqueColumns"],[186,60,169,66],[186,61,169,67,"join"],[186,65,169,71],[186,66,169,72],[186,69,169,75],[186,70,169,76],[186,71,169,77],[187,8,170,12],[188,6,171,8],[189,6,172,8],[189,13,172,15],[189,17,172,19,"PostgrestFilterBuilder_1"],[189,41,172,43],[189,42,172,44,"default"],[189,49,172,51],[189,50,172,52],[190,8,173,12,"method"],[190,14,173,18],[191,8,174,12,"url"],[191,11,174,15],[191,13,174,17],[191,17,174,21],[191,18,174,22,"url"],[191,21,174,25],[192,8,175,12,"headers"],[192,15,175,19],[192,17,175,21],[192,21,175,25],[192,22,175,26,"headers"],[192,29,175,33],[193,8,176,12,"schema"],[193,14,176,18],[193,16,176,20],[193,20,176,24],[193,21,176,25,"schema"],[193,27,176,31],[194,8,177,12,"body"],[194,12,177,16],[194,14,177,18,"values"],[194,20,177,24],[195,8,178,12,"fetch"],[195,13,178,17],[195,15,178,19],[195,16,178,20,"_a"],[195,18,178,22],[195,21,178,25],[195,25,178,29],[195,26,178,30,"fetch"],[195,31,178,35],[195,37,178,41],[195,41,178,45],[195,45,178,49,"_a"],[195,47,178,51],[195,52,178,56],[195,57,178,61],[195,58,178,62],[195,61,178,65,"_a"],[195,63,178,67],[195,66,178,70,"fetch"],[196,6,179,8],[196,7,179,9],[196,8,179,10],[197,4,180,4],[198,4,181,4],[199,0,182,0],[200,0,183,0],[201,0,184,0],[202,0,185,0],[203,0,186,0],[204,0,187,0],[205,0,188,0],[206,0,189,0],[207,0,190,0],[208,0,191,0],[209,0,192,0],[210,0,193,0],[211,0,194,0],[212,0,195,0],[213,0,196,0],[214,0,197,0],[215,0,198,0],[216,0,199,0],[217,0,200,0],[218,0,201,0],[219,4,202,4,"update"],[219,10,202,10,"update"],[219,11,202,11,"values"],[219,17,202,17],[219,19,202,19],[220,6,202,21,"count"],[221,4,202,28],[221,5,202,29],[221,8,202,32],[221,9,202,33],[221,10,202,34],[221,12,202,36],[222,6,203,8],[222,10,203,12,"_a"],[222,12,203,14],[223,6,204,8],[223,12,204,14,"method"],[223,18,204,20],[223,21,204,23],[223,28,204,30],[224,6,205,8],[224,10,205,12,"count"],[224,15,205,17],[224,17,205,19],[225,8,206,12],[225,12,206,16],[225,13,206,17,"headers"],[225,20,206,24],[225,21,206,25,"append"],[225,27,206,31],[225,28,206,32],[225,36,206,40],[225,38,206,42],[225,47,206,51,"count"],[225,52,206,56],[225,54,206,58],[225,55,206,59],[226,6,207,8],[227,6,208,8],[227,13,208,15],[227,17,208,19,"PostgrestFilterBuilder_1"],[227,41,208,43],[227,42,208,44,"default"],[227,49,208,51],[227,50,208,52],[228,8,209,12,"method"],[228,14,209,18],[229,8,210,12,"url"],[229,11,210,15],[229,13,210,17],[229,17,210,21],[229,18,210,22,"url"],[229,21,210,25],[230,8,211,12,"headers"],[230,15,211,19],[230,17,211,21],[230,21,211,25],[230,22,211,26,"headers"],[230,29,211,33],[231,8,212,12,"schema"],[231,14,212,18],[231,16,212,20],[231,20,212,24],[231,21,212,25,"schema"],[231,27,212,31],[232,8,213,12,"body"],[232,12,213,16],[232,14,213,18,"values"],[232,20,213,24],[233,8,214,12,"fetch"],[233,13,214,17],[233,15,214,19],[233,16,214,20,"_a"],[233,18,214,22],[233,21,214,25],[233,25,214,29],[233,26,214,30,"fetch"],[233,31,214,35],[233,37,214,41],[233,41,214,45],[233,45,214,49,"_a"],[233,47,214,51],[233,52,214,56],[233,57,214,61],[233,58,214,62],[233,61,214,65,"_a"],[233,63,214,67],[233,66,214,70,"fetch"],[234,6,215,8],[234,7,215,9],[234,8,215,10],[235,4,216,4],[236,4,217,4],[237,0,218,0],[238,0,219,0],[239,0,220,0],[240,0,221,0],[241,0,222,0],[242,0,223,0],[243,0,224,0],[244,0,225,0],[245,0,226,0],[246,0,227,0],[247,0,228,0],[248,0,229,0],[249,0,230,0],[250,0,231,0],[251,0,232,0],[252,0,233,0],[253,0,234,0],[254,0,235,0],[255,4,236,4,"delete"],[255,10,236,10,"delete"],[255,11,236,11],[256,6,236,13,"count"],[257,4,236,20],[257,5,236,21],[257,8,236,24],[257,9,236,25],[257,10,236,26],[257,12,236,28],[258,6,237,8],[258,10,237,12,"_a"],[258,12,237,14],[259,6,238,8],[259,12,238,14,"method"],[259,18,238,20],[259,21,238,23],[259,29,238,31],[260,6,239,8],[260,10,239,12,"count"],[260,15,239,17],[260,17,239,19],[261,8,240,12],[261,12,240,16],[261,13,240,17,"headers"],[261,20,240,24],[261,21,240,25,"append"],[261,27,240,31],[261,28,240,32],[261,36,240,40],[261,38,240,42],[261,47,240,51,"count"],[261,52,240,56],[261,54,240,58],[261,55,240,59],[262,6,241,8],[263,6,242,8],[263,13,242,15],[263,17,242,19,"PostgrestFilterBuilder_1"],[263,41,242,43],[263,42,242,44,"default"],[263,49,242,51],[263,50,242,52],[264,8,243,12,"method"],[264,14,243,18],[265,8,244,12,"url"],[265,11,244,15],[265,13,244,17],[265,17,244,21],[265,18,244,22,"url"],[265,21,244,25],[266,8,245,12,"headers"],[266,15,245,19],[266,17,245,21],[266,21,245,25],[266,22,245,26,"headers"],[266,29,245,33],[267,8,246,12,"schema"],[267,14,246,18],[267,16,246,20],[267,20,246,24],[267,21,246,25,"schema"],[267,27,246,31],[268,8,247,12,"fetch"],[268,13,247,17],[268,15,247,19],[268,16,247,20,"_a"],[268,18,247,22],[268,21,247,25],[268,25,247,29],[268,26,247,30,"fetch"],[268,31,247,35],[268,37,247,41],[268,41,247,45],[268,45,247,49,"_a"],[268,47,247,51],[268,52,247,56],[268,57,247,61],[268,58,247,62],[268,61,247,65,"_a"],[268,63,247,67],[268,66,247,70,"fetch"],[269,6,248,8],[269,7,248,9],[269,8,248,10],[270,4,249,4],[271,2,250,0],[272,2,251,0,"exports"],[272,9,251,7],[272,10,251,8,"default"],[272,17,251,15],[272,20,251,18,"PostgrestQueryBuilder"],[272,41,251,39],[273,0,251,40],[273,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCO;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CFC"},"hasCjsExports":true},"type":"js/module"}]}