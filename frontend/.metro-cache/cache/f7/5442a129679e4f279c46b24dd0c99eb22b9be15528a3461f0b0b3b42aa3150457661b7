{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.httpEndpointURL = exports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (exports.PostgresTypes = PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    if (!record) {\n      return {};\n    }\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  exports.convertChangeData = convertChangeData;\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find(x => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n  };\n  exports.convertColumn = convertColumn;\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      const dataType = type.slice(1, type.length);\n      return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return (0, exports.toBoolean)(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return (0, exports.toNumber)(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return (0, exports.toJson)(value);\n      case PostgresTypes.timestamp:\n        return (0, exports.toTimestampString)(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  exports.convertCell = convertCell;\n  const noop = value => {\n    return value;\n  };\n  const toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  exports.toBoolean = toBoolean;\n  const toNumber = value => {\n    if (typeof value === 'string') {\n      const parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  exports.toNumber = toNumber;\n  const toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  exports.toJson = toJson;\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      let arr;\n      const valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => (0, exports.convertCell)(type, val));\n    }\n    return value;\n  };\n  exports.toArray = toArray;\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  const toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  exports.toTimestampString = toTimestampString;\n  const httpEndpointURL = socketUrl => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\n  };\n  exports.httpEndpointURL = httpEndpointURL;\n});","lineCount":235,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,2,5,0,"Object"],[7,8,5,6],[7,9,5,7,"defineProperty"],[7,23,5,21],[7,24,5,22,"exports"],[7,31,5,29],[7,33,5,31],[7,45,5,43],[7,47,5,45],[8,4,5,47,"value"],[8,9,5,52],[8,11,5,54],[9,2,5,59],[9,3,5,60],[9,4,5,61],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"httpEndpointURL"],[10,25,6,23],[10,28,6,26,"exports"],[10,35,6,33],[10,36,6,34,"toTimestampString"],[10,53,6,51],[10,56,6,54,"exports"],[10,63,6,61],[10,64,6,62,"toArray"],[10,71,6,69],[10,74,6,72,"exports"],[10,81,6,79],[10,82,6,80,"toJson"],[10,88,6,86],[10,91,6,89,"exports"],[10,98,6,96],[10,99,6,97,"toNumber"],[10,107,6,105],[10,110,6,108,"exports"],[10,117,6,115],[10,118,6,116,"toBoolean"],[10,127,6,125],[10,130,6,128,"exports"],[10,137,6,135],[10,138,6,136,"convertCell"],[10,149,6,147],[10,152,6,150,"exports"],[10,159,6,157],[10,160,6,158,"convertColumn"],[10,173,6,171],[10,176,6,174,"exports"],[10,183,6,181],[10,184,6,182,"convertChangeData"],[10,201,6,199],[10,204,6,202,"exports"],[10,211,6,209],[10,212,6,210,"PostgresTypes"],[10,225,6,223],[10,228,6,226],[10,233,6,231],[10,234,6,232],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,6,9,4,"PostgresTypes"],[13,19,9,17],[14,2,10,0],[14,3,10,1],[14,13,10,11,"PostgresTypes"],[14,26,10,24],[14,28,10,26],[15,4,11,4,"PostgresTypes"],[15,17,11,17],[15,18,11,18],[15,27,11,27],[15,28,11,28],[15,31,11,31],[15,40,11,40],[16,4,12,4,"PostgresTypes"],[16,17,12,17],[16,18,12,18],[16,24,12,24],[16,25,12,25],[16,28,12,28],[16,34,12,34],[17,4,13,4,"PostgresTypes"],[17,17,13,17],[17,18,13,18],[17,24,13,24],[17,25,13,25],[17,28,13,28],[17,34,13,34],[18,4,14,4,"PostgresTypes"],[18,17,14,17],[18,18,14,18],[18,29,14,29],[18,30,14,30],[18,33,14,33],[18,44,14,44],[19,4,15,4,"PostgresTypes"],[19,17,15,17],[19,18,15,18],[19,26,15,26],[19,27,15,27],[19,30,15,30],[19,38,15,38],[20,4,16,4,"PostgresTypes"],[20,17,16,17],[20,18,16,18],[20,26,16,26],[20,27,16,27],[20,30,16,30],[20,38,16,38],[21,4,17,4,"PostgresTypes"],[21,17,17,17],[21,18,17,18],[21,24,17,24],[21,25,17,25],[21,28,17,28],[21,34,17,34],[22,4,18,4,"PostgresTypes"],[22,17,18,17],[22,18,18,18],[22,24,18,24],[22,25,18,25],[22,28,18,28],[22,34,18,34],[23,4,19,4,"PostgresTypes"],[23,17,19,17],[23,18,19,18],[23,29,19,29],[23,30,19,30],[23,33,19,33],[23,44,19,44],[24,4,20,4,"PostgresTypes"],[24,17,20,17],[24,18,20,18],[24,24,20,24],[24,25,20,25],[24,28,20,28],[24,34,20,34],[25,4,21,4,"PostgresTypes"],[25,17,21,17],[25,18,21,18],[25,29,21,29],[25,30,21,30],[25,33,21,33],[25,44,21,44],[26,4,22,4,"PostgresTypes"],[26,17,22,17],[26,18,22,18],[26,24,22,24],[26,25,22,25],[26,28,22,28],[26,34,22,34],[27,4,23,4,"PostgresTypes"],[27,17,23,17],[27,18,23,18],[27,25,23,25],[27,26,23,26],[27,29,23,29],[27,36,23,36],[28,4,24,4,"PostgresTypes"],[28,17,24,17],[28,18,24,18],[28,25,24,25],[28,26,24,26],[28,29,24,29],[28,36,24,36],[29,4,25,4,"PostgresTypes"],[29,17,25,17],[29,18,25,18],[29,27,25,27],[29,28,25,28],[29,31,25,31],[29,40,25,40],[30,4,26,4,"PostgresTypes"],[30,17,26,17],[30,18,26,18],[30,23,26,23],[30,24,26,24],[30,27,26,27],[30,32,26,32],[31,4,27,4,"PostgresTypes"],[31,17,27,17],[31,18,27,18],[31,27,27,27],[31,28,27,28],[31,31,27,31],[31,40,27,40],[32,4,28,4,"PostgresTypes"],[32,17,28,17],[32,18,28,18],[32,24,28,24],[32,25,28,25],[32,28,28,28],[32,34,28,34],[33,4,29,4,"PostgresTypes"],[33,17,29,17],[33,18,29,18],[33,24,29,24],[33,25,29,25],[33,28,29,28],[33,34,29,34],[34,4,30,4,"PostgresTypes"],[34,17,30,17],[34,18,30,18],[34,29,30,29],[34,30,30,30],[34,33,30,33],[34,44,30,44],[35,4,31,4,"PostgresTypes"],[35,17,31,17],[35,18,31,18],[35,31,31,31],[35,32,31,32],[35,35,31,35],[35,48,31,48],[36,4,32,4,"PostgresTypes"],[36,17,32,17],[36,18,32,18],[36,26,32,26],[36,27,32,27],[36,30,32,30],[36,38,32,38],[37,4,33,4,"PostgresTypes"],[37,17,33,17],[37,18,33,18],[37,27,33,27],[37,28,33,28],[37,31,33,31],[37,40,33,40],[38,4,34,4,"PostgresTypes"],[38,17,34,17],[38,18,34,18],[38,29,34,29],[38,30,34,30],[38,33,34,33],[38,44,34,44],[39,2,35,0],[39,3,35,1],[39,5,35,3,"PostgresTypes"],[39,18,35,16],[39,23,35,21,"exports"],[39,30,35,28],[39,31,35,29,"PostgresTypes"],[39,44,35,42],[39,47,35,45,"PostgresTypes"],[39,60,35,58],[39,63,35,61],[39,64,35,62],[39,65,35,63],[39,66,35,64],[39,67,35,65],[40,2,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,2,48,0],[52,8,48,6,"convertChangeData"],[52,25,48,23],[52,28,48,26,"convertChangeData"],[52,29,48,27,"columns"],[52,36,48,34],[52,38,48,36,"record"],[52,44,48,42],[52,46,48,44,"options"],[52,53,48,51],[52,56,48,54],[52,57,48,55],[52,58,48,56],[52,63,48,61],[53,4,49,4],[53,8,49,8,"_a"],[53,10,49,10],[54,4,50,4],[54,10,50,10,"skipTypes"],[54,19,50,19],[54,22,50,22],[54,23,50,23,"_a"],[54,25,50,25],[54,28,50,28,"options"],[54,35,50,35],[54,36,50,36,"skipTypes"],[54,45,50,45],[54,51,50,51],[54,55,50,55],[54,59,50,59,"_a"],[54,61,50,61],[54,66,50,66],[54,71,50,71],[54,72,50,72],[54,75,50,75,"_a"],[54,77,50,77],[54,80,50,80],[54,82,50,82],[55,4,51,4],[55,8,51,8],[55,9,51,9,"record"],[55,15,51,15],[55,17,51,17],[56,6,52,8],[56,13,52,15],[56,14,52,16],[56,15,52,17],[57,4,53,4],[58,4,54,4],[58,11,54,11,"Object"],[58,17,54,17],[58,18,54,18,"keys"],[58,22,54,22],[58,23,54,23,"record"],[58,29,54,29],[58,30,54,30],[58,31,54,31,"reduce"],[58,37,54,37],[58,38,54,38],[58,39,54,39,"acc"],[58,42,54,42],[58,44,54,44,"rec_key"],[58,51,54,51],[58,56,54,56],[59,6,55,8,"acc"],[59,9,55,11],[59,10,55,12,"rec_key"],[59,17,55,19],[59,18,55,20],[59,21,55,23],[59,22,55,24],[59,23,55,25],[59,25,55,27,"exports"],[59,32,55,34],[59,33,55,35,"convertColumn"],[59,46,55,48],[59,48,55,50,"rec_key"],[59,55,55,57],[59,57,55,59,"columns"],[59,64,55,66],[59,66,55,68,"record"],[59,72,55,74],[59,74,55,76,"skipTypes"],[59,83,55,85],[59,84,55,86],[60,6,56,8],[60,13,56,15,"acc"],[60,16,56,18],[61,4,57,4],[61,5,57,5],[61,7,57,7],[61,8,57,8],[61,9,57,9],[61,10,57,10],[62,2,58,0],[62,3,58,1],[63,2,59,0,"exports"],[63,9,59,7],[63,10,59,8,"convertChangeData"],[63,27,59,25],[63,30,59,28,"convertChangeData"],[63,47,59,45],[64,2,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,0,71,0],[76,0,72,0],[77,0,73,0],[78,2,74,0],[78,8,74,6,"convertColumn"],[78,21,74,19],[78,24,74,22,"convertColumn"],[78,25,74,23,"columnName"],[78,35,74,33],[78,37,74,35,"columns"],[78,44,74,42],[78,46,74,44,"record"],[78,52,74,50],[78,54,74,52,"skipTypes"],[78,63,74,61],[78,68,74,66],[79,4,75,4],[79,10,75,10,"column"],[79,16,75,16],[79,19,75,19,"columns"],[79,26,75,26],[79,27,75,27,"find"],[79,31,75,31],[79,32,75,33,"x"],[79,33,75,34],[79,37,75,39,"x"],[79,38,75,40],[79,39,75,41,"name"],[79,43,75,45],[79,48,75,50,"columnName"],[79,58,75,60],[79,59,75,61],[80,4,76,4],[80,10,76,10,"colType"],[80,17,76,17],[80,20,76,20,"column"],[80,26,76,26],[80,31,76,31],[80,35,76,35],[80,39,76,39,"column"],[80,45,76,45],[80,50,76,50],[80,55,76,55],[80,56,76,56],[80,59,76,59],[80,64,76,64],[80,65,76,65],[80,68,76,68,"column"],[80,74,76,74],[80,75,76,75,"type"],[80,79,76,79],[81,4,77,4],[81,10,77,10,"value"],[81,15,77,15],[81,18,77,18,"record"],[81,24,77,24],[81,25,77,25,"columnName"],[81,35,77,35],[81,36,77,36],[82,4,78,4],[82,8,78,8,"colType"],[82,15,78,15],[82,19,78,19],[82,20,78,20,"skipTypes"],[82,29,78,29],[82,30,78,30,"includes"],[82,38,78,38],[82,39,78,39,"colType"],[82,46,78,46],[82,47,78,47],[82,49,78,49],[83,6,79,8],[83,13,79,15],[83,14,79,16],[83,15,79,17],[83,17,79,19,"exports"],[83,24,79,26],[83,25,79,27,"convertCell"],[83,36,79,38],[83,38,79,40,"colType"],[83,45,79,47],[83,47,79,49,"value"],[83,52,79,54],[83,53,79,55],[84,4,80,4],[85,4,81,4],[85,11,81,11,"noop"],[85,15,81,15],[85,16,81,16,"value"],[85,21,81,21],[85,22,81,22],[86,2,82,0],[86,3,82,1],[87,2,83,0,"exports"],[87,9,83,7],[87,10,83,8,"convertColumn"],[87,23,83,21],[87,26,83,24,"convertColumn"],[87,39,83,37],[88,2,84,0],[89,0,85,0],[90,0,86,0],[91,0,87,0],[92,0,88,0],[93,0,89,0],[94,0,90,0],[95,0,91,0],[96,0,92,0],[97,0,93,0],[98,0,94,0],[99,0,95,0],[100,0,96,0],[101,2,97,0],[101,8,97,6,"convertCell"],[101,19,97,17],[101,22,97,20,"convertCell"],[101,23,97,21,"type"],[101,27,97,25],[101,29,97,27,"value"],[101,34,97,32],[101,39,97,37],[102,4,98,4],[103,4,99,4],[103,8,99,8,"type"],[103,12,99,12],[103,13,99,13,"charAt"],[103,19,99,19],[103,20,99,20],[103,21,99,21],[103,22,99,22],[103,27,99,27],[103,30,99,30],[103,32,99,32],[104,6,100,8],[104,12,100,14,"dataType"],[104,20,100,22],[104,23,100,25,"type"],[104,27,100,29],[104,28,100,30,"slice"],[104,33,100,35],[104,34,100,36],[104,35,100,37],[104,37,100,39,"type"],[104,41,100,43],[104,42,100,44,"length"],[104,48,100,50],[104,49,100,51],[105,6,101,8],[105,13,101,15],[105,14,101,16],[105,15,101,17],[105,17,101,19,"exports"],[105,24,101,26],[105,25,101,27,"toArray"],[105,32,101,34],[105,34,101,36,"value"],[105,39,101,41],[105,41,101,43,"dataType"],[105,49,101,51],[105,50,101,52],[106,4,102,4],[107,4,103,4],[108,4,104,4],[108,12,104,12,"type"],[108,16,104,16],[109,6,105,8],[109,11,105,13,"PostgresTypes"],[109,24,105,26],[109,25,105,27,"bool"],[109,29,105,31],[110,8,106,12],[110,15,106,19],[110,16,106,20],[110,17,106,21],[110,19,106,23,"exports"],[110,26,106,30],[110,27,106,31,"toBoolean"],[110,36,106,40],[110,38,106,42,"value"],[110,43,106,47],[110,44,106,48],[111,6,107,8],[111,11,107,13,"PostgresTypes"],[111,24,107,26],[111,25,107,27,"float4"],[111,31,107,33],[112,6,108,8],[112,11,108,13,"PostgresTypes"],[112,24,108,26],[112,25,108,27,"float8"],[112,31,108,33],[113,6,109,8],[113,11,109,13,"PostgresTypes"],[113,24,109,26],[113,25,109,27,"int2"],[113,29,109,31],[114,6,110,8],[114,11,110,13,"PostgresTypes"],[114,24,110,26],[114,25,110,27,"int4"],[114,29,110,31],[115,6,111,8],[115,11,111,13,"PostgresTypes"],[115,24,111,26],[115,25,111,27,"int8"],[115,29,111,31],[116,6,112,8],[116,11,112,13,"PostgresTypes"],[116,24,112,26],[116,25,112,27,"numeric"],[116,32,112,34],[117,6,113,8],[117,11,113,13,"PostgresTypes"],[117,24,113,26],[117,25,113,27,"oid"],[117,28,113,30],[118,8,114,12],[118,15,114,19],[118,16,114,20],[118,17,114,21],[118,19,114,23,"exports"],[118,26,114,30],[118,27,114,31,"toNumber"],[118,35,114,39],[118,37,114,41,"value"],[118,42,114,46],[118,43,114,47],[119,6,115,8],[119,11,115,13,"PostgresTypes"],[119,24,115,26],[119,25,115,27,"json"],[119,29,115,31],[120,6,116,8],[120,11,116,13,"PostgresTypes"],[120,24,116,26],[120,25,116,27,"jsonb"],[120,30,116,32],[121,8,117,12],[121,15,117,19],[121,16,117,20],[121,17,117,21],[121,19,117,23,"exports"],[121,26,117,30],[121,27,117,31,"toJson"],[121,33,117,37],[121,35,117,39,"value"],[121,40,117,44],[121,41,117,45],[122,6,118,8],[122,11,118,13,"PostgresTypes"],[122,24,118,26],[122,25,118,27,"timestamp"],[122,34,118,36],[123,8,119,12],[123,15,119,19],[123,16,119,20],[123,17,119,21],[123,19,119,23,"exports"],[123,26,119,30],[123,27,119,31,"toTimestampString"],[123,44,119,48],[123,46,119,50,"value"],[123,51,119,55],[123,52,119,56],[124,6,119,58],[125,6,120,8],[125,11,120,13,"PostgresTypes"],[125,24,120,26],[125,25,120,27,"abstime"],[125,32,120,34],[125,33,120,35],[125,34,120,36],[126,6,121,8],[126,11,121,13,"PostgresTypes"],[126,24,121,26],[126,25,121,27,"date"],[126,29,121,31],[126,30,121,32],[126,31,121,33],[127,6,122,8],[127,11,122,13,"PostgresTypes"],[127,24,122,26],[127,25,122,27,"daterange"],[127,34,122,36],[128,6,123,8],[128,11,123,13,"PostgresTypes"],[128,24,123,26],[128,25,123,27,"int4range"],[128,34,123,36],[129,6,124,8],[129,11,124,13,"PostgresTypes"],[129,24,124,26],[129,25,124,27,"int8range"],[129,34,124,36],[130,6,125,8],[130,11,125,13,"PostgresTypes"],[130,24,125,26],[130,25,125,27,"money"],[130,30,125,32],[131,6,126,8],[131,11,126,13,"PostgresTypes"],[131,24,126,26],[131,25,126,27,"reltime"],[131,32,126,34],[131,33,126,35],[131,34,126,36],[132,6,127,8],[132,11,127,13,"PostgresTypes"],[132,24,127,26],[132,25,127,27,"text"],[132,29,127,31],[133,6,128,8],[133,11,128,13,"PostgresTypes"],[133,24,128,26],[133,25,128,27,"time"],[133,29,128,31],[133,30,128,32],[133,31,128,33],[134,6,129,8],[134,11,129,13,"PostgresTypes"],[134,24,129,26],[134,25,129,27,"timestamptz"],[134,36,129,38],[134,37,129,39],[134,38,129,40],[135,6,130,8],[135,11,130,13,"PostgresTypes"],[135,24,130,26],[135,25,130,27,"timetz"],[135,31,130,33],[135,32,130,34],[135,33,130,35],[136,6,131,8],[136,11,131,13,"PostgresTypes"],[136,24,131,26],[136,25,131,27,"tsrange"],[136,32,131,34],[137,6,132,8],[137,11,132,13,"PostgresTypes"],[137,24,132,26],[137,25,132,27,"tstzrange"],[137,34,132,36],[138,8,133,12],[138,15,133,19,"noop"],[138,19,133,23],[138,20,133,24,"value"],[138,25,133,29],[138,26,133,30],[139,6,134,8],[140,8,135,12],[141,8,136,12],[141,15,136,19,"noop"],[141,19,136,23],[141,20,136,24,"value"],[141,25,136,29],[141,26,136,30],[142,4,137,4],[143,2,138,0],[143,3,138,1],[144,2,139,0,"exports"],[144,9,139,7],[144,10,139,8,"convertCell"],[144,21,139,19],[144,24,139,22,"convertCell"],[144,35,139,33],[145,2,140,0],[145,8,140,6,"noop"],[145,12,140,10],[145,15,140,14,"value"],[145,20,140,19],[145,24,140,24],[146,4,141,4],[146,11,141,11,"value"],[146,16,141,16],[147,2,142,0],[147,3,142,1],[148,2,143,0],[148,8,143,6,"toBoolean"],[148,17,143,15],[148,20,143,19,"value"],[148,25,143,24],[148,29,143,29],[149,4,144,4],[149,12,144,12,"value"],[149,17,144,17],[150,6,145,8],[150,11,145,13],[150,14,145,16],[151,8,146,12],[151,15,146,19],[151,19,146,23],[152,6,147,8],[152,11,147,13],[152,14,147,16],[153,8,148,12],[153,15,148,19],[153,20,148,24],[154,6,149,8],[155,8,150,12],[155,15,150,19,"value"],[155,20,150,24],[156,4,151,4],[157,2,152,0],[157,3,152,1],[158,2,153,0,"exports"],[158,9,153,7],[158,10,153,8,"toBoolean"],[158,19,153,17],[158,22,153,20,"toBoolean"],[158,31,153,29],[159,2,154,0],[159,8,154,6,"toNumber"],[159,16,154,14],[159,19,154,18,"value"],[159,24,154,23],[159,28,154,28],[160,4,155,4],[160,8,155,8],[160,15,155,15,"value"],[160,20,155,20],[160,25,155,25],[160,33,155,33],[160,35,155,35],[161,6,156,8],[161,12,156,14,"parsedValue"],[161,23,156,25],[161,26,156,28,"parseFloat"],[161,36,156,38],[161,37,156,39,"value"],[161,42,156,44],[161,43,156,45],[162,6,157,8],[162,10,157,12],[162,11,157,13,"Number"],[162,17,157,19],[162,18,157,20,"isNaN"],[162,23,157,25],[162,24,157,26,"parsedValue"],[162,35,157,37],[162,36,157,38],[162,38,157,40],[163,8,158,12],[163,15,158,19,"parsedValue"],[163,26,158,30],[164,6,159,8],[165,4,160,4],[166,4,161,4],[166,11,161,11,"value"],[166,16,161,16],[167,2,162,0],[167,3,162,1],[168,2,163,0,"exports"],[168,9,163,7],[168,10,163,8,"toNumber"],[168,18,163,16],[168,21,163,19,"toNumber"],[168,29,163,27],[169,2,164,0],[169,8,164,6,"toJson"],[169,14,164,12],[169,17,164,16,"value"],[169,22,164,21],[169,26,164,26],[170,4,165,4],[170,8,165,8],[170,15,165,15,"value"],[170,20,165,20],[170,25,165,25],[170,33,165,33],[170,35,165,35],[171,6,166,8],[171,10,166,12],[172,8,167,12],[172,15,167,19,"JSON"],[172,19,167,23],[172,20,167,24,"parse"],[172,25,167,29],[172,26,167,30,"value"],[172,31,167,35],[172,32,167,36],[173,6,168,8],[173,7,168,9],[173,8,169,8],[173,15,169,15,"error"],[173,20,169,20],[173,22,169,22],[174,8,170,12,"console"],[174,15,170,19],[174,16,170,20,"log"],[174,19,170,23],[174,20,170,24],[174,41,170,45,"error"],[174,46,170,50],[174,48,170,52],[174,49,170,53],[175,8,171,12],[175,15,171,19,"value"],[175,20,171,24],[176,6,172,8],[177,4,173,4],[178,4,174,4],[178,11,174,11,"value"],[178,16,174,16],[179,2,175,0],[179,3,175,1],[180,2,176,0,"exports"],[180,9,176,7],[180,10,176,8,"toJson"],[180,16,176,14],[180,19,176,17,"toJson"],[180,25,176,23],[181,2,177,0],[182,0,178,0],[183,0,179,0],[184,0,180,0],[185,0,181,0],[186,0,182,0],[187,0,183,0],[188,0,184,0],[189,0,185,0],[190,0,186,0],[191,2,187,0],[191,8,187,6,"toArray"],[191,15,187,13],[191,18,187,16,"toArray"],[191,19,187,17,"value"],[191,24,187,22],[191,26,187,24,"type"],[191,30,187,28],[191,35,187,33],[192,4,188,4],[192,8,188,8],[192,15,188,15,"value"],[192,20,188,20],[192,25,188,25],[192,33,188,33],[192,35,188,35],[193,6,189,8],[193,13,189,15,"value"],[193,18,189,20],[194,4,190,4],[195,4,191,4],[195,10,191,10,"lastIdx"],[195,17,191,17],[195,20,191,20,"value"],[195,25,191,25],[195,26,191,26,"length"],[195,32,191,32],[195,35,191,35],[195,36,191,36],[196,4,192,4],[196,10,192,10,"closeBrace"],[196,20,192,20],[196,23,192,23,"value"],[196,28,192,28],[196,29,192,29,"lastIdx"],[196,36,192,36],[196,37,192,37],[197,4,193,4],[197,10,193,10,"openBrace"],[197,19,193,19],[197,22,193,22,"value"],[197,27,193,27],[197,28,193,28],[197,29,193,29],[197,30,193,30],[198,4,194,4],[199,4,195,4],[199,8,195,8,"openBrace"],[199,17,195,17],[199,22,195,22],[199,25,195,25],[199,29,195,29,"closeBrace"],[199,39,195,39],[199,44,195,44],[199,47,195,47],[199,49,195,49],[200,6,196,8],[200,10,196,12,"arr"],[200,13,196,15],[201,6,197,8],[201,12,197,14,"valTrim"],[201,19,197,21],[201,22,197,24,"value"],[201,27,197,29],[201,28,197,30,"slice"],[201,33,197,35],[201,34,197,36],[201,35,197,37],[201,37,197,39,"lastIdx"],[201,44,197,46],[201,45,197,47],[202,6,198,8],[203,6,199,8],[203,10,199,12],[204,8,200,12,"arr"],[204,11,200,15],[204,14,200,18,"JSON"],[204,18,200,22],[204,19,200,23,"parse"],[204,24,200,28],[204,25,200,29],[204,28,200,32],[204,31,200,35,"valTrim"],[204,38,200,42],[204,41,200,45],[204,44,200,48],[204,45,200,49],[205,6,201,8],[205,7,201,9],[205,8,202,8],[205,15,202,15,"_"],[205,16,202,16],[205,18,202,18],[206,8,203,12],[207,8,204,12,"arr"],[207,11,204,15],[207,14,204,18,"valTrim"],[207,21,204,25],[207,24,204,28,"valTrim"],[207,31,204,35],[207,32,204,36,"split"],[207,37,204,41],[207,38,204,42],[207,41,204,45],[207,42,204,46],[207,45,204,49],[207,47,204,51],[208,6,205,8],[209,6,206,8],[209,13,206,15,"arr"],[209,16,206,18],[209,17,206,19,"map"],[209,20,206,22],[209,21,206,24,"val"],[209,24,206,27],[209,28,206,32],[209,29,206,33],[209,30,206,34],[209,32,206,36,"exports"],[209,39,206,43],[209,40,206,44,"convertCell"],[209,51,206,55],[209,53,206,57,"type"],[209,57,206,61],[209,59,206,63,"val"],[209,62,206,66],[209,63,206,67],[209,64,206,68],[210,4,207,4],[211,4,208,4],[211,11,208,11,"value"],[211,16,208,16],[212,2,209,0],[212,3,209,1],[213,2,210,0,"exports"],[213,9,210,7],[213,10,210,8,"toArray"],[213,17,210,15],[213,20,210,18,"toArray"],[213,27,210,25],[214,2,211,0],[215,0,212,0],[216,0,213,0],[217,0,214,0],[218,0,215,0],[219,0,216,0],[220,0,217,0],[221,2,218,0],[221,8,218,6,"toTimestampString"],[221,25,218,23],[221,28,218,27,"value"],[221,33,218,32],[221,37,218,37],[222,4,219,4],[222,8,219,8],[222,15,219,15,"value"],[222,20,219,20],[222,25,219,25],[222,33,219,33],[222,35,219,35],[223,6,220,8],[223,13,220,15,"value"],[223,18,220,20],[223,19,220,21,"replace"],[223,26,220,28],[223,27,220,29],[223,30,220,32],[223,32,220,34],[223,35,220,37],[223,36,220,38],[224,4,221,4],[225,4,222,4],[225,11,222,11,"value"],[225,16,222,16],[226,2,223,0],[226,3,223,1],[227,2,224,0,"exports"],[227,9,224,7],[227,10,224,8,"toTimestampString"],[227,27,224,25],[227,30,224,28,"toTimestampString"],[227,47,224,45],[228,2,225,0],[228,8,225,6,"httpEndpointURL"],[228,23,225,21],[228,26,225,25,"socketUrl"],[228,35,225,34],[228,39,225,39],[229,4,226,4],[229,8,226,8,"url"],[229,11,226,11],[229,14,226,14,"socketUrl"],[229,23,226,23],[230,4,227,4,"url"],[230,7,227,7],[230,10,227,10,"url"],[230,13,227,13],[230,14,227,14,"replace"],[230,21,227,21],[230,22,227,22],[230,28,227,28],[230,30,227,30],[230,36,227,36],[230,37,227,37],[231,4,228,4,"url"],[231,7,228,7],[231,10,228,10,"url"],[231,13,228,13],[231,14,228,14,"replace"],[231,21,228,21],[231,22,228,22],[231,71,228,71],[231,73,228,73],[231,75,228,75],[231,76,228,76],[232,4,229,4],[232,11,229,11,"url"],[232,14,229,14],[232,15,229,15,"replace"],[232,22,229,22],[232,23,229,23],[232,29,229,29],[232,31,229,31],[232,33,229,33],[232,34,229,34],[232,37,229,37],[232,53,229,53],[233,2,230,0],[233,3,230,1],[234,2,231,0,"exports"],[234,9,231,7],[234,10,231,8,"httpEndpointURL"],[234,25,231,23],[234,28,231,26,"httpEndpointURL"],[234,43,231,41],[235,0,231,42],[235,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCS;CDyB;0BEa;sCCM;KDG;CFC;sBIgB;gCCC,4BD;CJO;oBMe;CNyC;aOE;CPE;kBQC;CRS;iBSE;CTQ;eUE;CVW;gBWY;uBCmB,4CD;CXG;0BaS;CbK;wBcE;CdK"},"hasCjsExports":true},"type":"js/module"}]}