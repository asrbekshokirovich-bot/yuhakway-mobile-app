{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[2], \"./PostgrestFilterBuilder\"));\n  var PostgrestQueryBuilder = /*#__PURE__*/function () {\n    function PostgrestQueryBuilder(url, _ref) {\n      var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestQueryBuilder);\n      this.url = url;\n      this.headers = new Headers(headers);\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    return _createClass(PostgrestQueryBuilder, [{\n      key: \"select\",\n      value: function select(columns, options) {\n        var _ref2 = options !== null && options !== void 0 ? options : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          count = _ref2.count;\n        var method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch\n        });\n      }\n      /**\n       * Perform an INSERT into the table or view.\n       *\n       * By default, inserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to insert. Pass an object to insert a single row\n       * or an array to insert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count inserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. Only applies for bulk\n       * inserts.\n       */\n    }, {\n      key: \"insert\",\n      value: function insert(values) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === void 0 ? true : _ref3$defaultToNull;\n        var _a;\n        var method = 'POST';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', `missing=default`);\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPSERT on the table or view. Depending on the column(s) passed\n       * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n       * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n       * exist, or if it does exist, perform an alternative action depending on\n       * `ignoreDuplicates`.\n       *\n       * By default, upserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to upsert with. Pass an object to upsert a\n       * single row or an array to upsert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n       * duplicate rows are determined. Two rows are duplicates if all the\n       * `onConflict` columns are equal.\n       *\n       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n       * `false`, duplicate rows are merged with existing rows.\n       *\n       * @param options.count - Count algorithm to use to count upserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. This only applies when\n       * inserting new rows, not when merging with existing rows under\n       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n       */\n    }, {\n      key: \"upsert\",\n      value: function upsert(values) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === void 0 ? true : _ref4$defaultToNull;\n        var _a;\n        var method = 'POST';\n        this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\n        if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        if (!defaultToNull) {\n          this.headers.append('Prefer', 'missing=default');\n        }\n        if (Array.isArray(values)) {\n          var columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n          if (columns.length > 0) {\n            var uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform an UPDATE on the table or view.\n       *\n       * By default, updated rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param values - The values to update with\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count updated rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"update\",\n      value: function update(values) {\n        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n        var _a;\n        var method = 'PATCH';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n      /**\n       * Perform a DELETE on the table or view.\n       *\n       * By default, deleted rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count deleted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n        var _a;\n        var method = 'DELETE';\n        if (count) {\n          this.headers.append('Prefer', `count=${count}`);\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":290,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,2,0],[6,6,2,4,"__importDefault"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__importDefault"],[6,52,2,51],[6,56,2,56],[6,66,2,66,"mod"],[6,69,2,69],[6,71,2,71],[7,4,3,4],[7,11,3,12,"mod"],[7,14,3,15],[7,18,3,19,"mod"],[7,21,3,22],[7,22,3,23,"__esModule"],[7,32,3,33],[7,35,3,37,"mod"],[7,38,3,40],[7,41,3,43],[8,6,3,45],[8,15,3,54],[8,17,3,56,"mod"],[9,4,3,60],[9,5,3,61],[10,2,4,0],[10,3,4,1],[11,2,5,0,"Object"],[11,8,5,6],[11,9,5,7,"defineProperty"],[11,23,5,21],[11,24,5,22,"exports"],[11,31,5,29],[11,33,5,31],[11,45,5,43],[11,47,5,45],[12,4,5,47,"value"],[12,9,5,52],[12,11,5,54],[13,2,5,59],[13,3,5,60],[13,4,5,61],[14,2,6,0],[14,6,6,6,"PostgrestFilterBuilder_1"],[14,30,6,30],[14,33,6,33,"__importDefault"],[14,48,6,48],[14,49,6,49,"require"],[14,56,6,56],[14,57,6,56,"_dependencyMap"],[14,71,6,56],[14,102,6,83],[14,103,6,84],[14,104,6,85],[15,2,6,86],[15,6,7,6,"PostgrestQueryBuilder"],[15,27,7,27],[16,4,8,4],[16,13,8,4,"PostgrestQueryBuilder"],[16,35,8,16,"url"],[16,38,8,19],[16,40,8,19,"_ref"],[16,44,8,19],[16,46,8,55],[17,6,8,55],[17,10,8,55,"_ref$headers"],[17,22,8,55],[17,25,8,55,"_ref"],[17,29,8,55],[17,30,8,23,"headers"],[17,37,8,30],[18,8,8,23,"headers"],[18,15,8,30],[18,18,8,30,"_ref$headers"],[18,30,8,30],[18,44,8,33],[18,45,8,34],[18,46,8,35],[18,49,8,35,"_ref$headers"],[18,61,8,35],[19,8,8,37,"schema"],[19,14,8,43],[19,17,8,43,"_ref"],[19,21,8,43],[19,22,8,37,"schema"],[19,28,8,43],[20,8,8,45,"fetch"],[20,13,8,50],[20,16,8,50,"_ref"],[20,20,8,50],[20,21,8,45,"fetch"],[20,26,8,50],[21,6,8,50,"_classCallCheck"],[21,21,8,50],[21,28,8,50,"PostgrestQueryBuilder"],[21,49,8,50],[22,6,9,8],[22,10,9,12],[22,11,9,13,"url"],[22,14,9,16],[22,17,9,19,"url"],[22,20,9,22],[23,6,10,8],[23,10,10,12],[23,11,10,13,"headers"],[23,18,10,20],[23,21,10,23],[23,25,10,27,"Headers"],[23,32,10,34],[23,33,10,35,"headers"],[23,40,10,42],[23,41,10,43],[24,6,11,8],[24,10,11,12],[24,11,11,13,"schema"],[24,17,11,19],[24,20,11,22,"schema"],[24,26,11,28],[25,6,12,8],[25,10,12,12],[25,11,12,13,"fetch"],[25,16,12,18],[25,19,12,21,"fetch"],[25,24,12,26],[26,4,13,4],[27,4,14,4],[28,0,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,0,21,0],[35,0,22,0],[36,0,23,0],[37,0,24,0],[38,0,25,0],[39,0,26,0],[40,0,27,0],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,0,31,0],[45,0,32,0],[46,0,33,0],[47,0,34,0],[48,4,14,4],[48,11,14,4,"_createClass"],[48,23,14,4],[48,24,14,4,"PostgrestQueryBuilder"],[48,45,14,4],[49,6,14,4,"key"],[49,9,14,4],[50,6,14,4,"value"],[50,11,14,4],[50,13,35,4],[50,22,35,4,"select"],[50,28,35,10,"select"],[50,29,35,11,"columns"],[50,36,35,18],[50,38,35,20,"options"],[50,45,35,27],[50,47,35,29],[51,8,36,8],[51,12,36,8,"_ref2"],[51,17,36,8],[51,20,36,40,"options"],[51,27,36,47],[51,32,36,52],[51,36,36,56],[51,40,36,60,"options"],[51,47,36,67],[51,52,36,72],[51,57,36,77],[51,58,36,78],[51,61,36,81,"options"],[51,68,36,88],[51,71,36,91],[51,72,36,92],[51,73,36,93],[52,10,36,93,"_ref2$head"],[52,20,36,93],[52,23,36,93,"_ref2"],[52,28,36,93],[52,29,36,16,"head"],[52,33,36,20],[53,10,36,16,"head"],[53,14,36,20],[53,17,36,20,"_ref2$head"],[53,27,36,20],[53,41,36,23],[53,46,36,28],[53,49,36,28,"_ref2$head"],[53,59,36,28],[54,10,36,30,"count"],[54,15,36,35],[54,18,36,35,"_ref2"],[54,23,36,35],[54,24,36,30,"count"],[54,29,36,35],[55,8,37,8],[55,12,37,14,"method"],[55,18,37,20],[55,21,37,23,"head"],[55,25,37,27],[55,28,37,30],[55,34,37,36],[55,37,37,39],[55,42,37,44],[56,8,38,8],[57,8,39,8],[57,12,39,12,"quoted"],[57,18,39,18],[57,21,39,21],[57,26,39,26],[58,8,40,8],[58,12,40,14,"cleanedColumns"],[58,26,40,28],[58,29,40,31],[58,30,40,32,"columns"],[58,37,40,39],[58,42,40,44],[58,46,40,48],[58,50,40,52,"columns"],[58,57,40,59],[58,62,40,64],[58,67,40,69],[58,68,40,70],[58,71,40,73,"columns"],[58,78,40,80],[58,81,40,83],[58,84,40,86],[58,86,41,13,"split"],[58,91,41,18],[58,92,41,19],[58,94,41,21],[58,95,41,22],[58,96,42,13,"map"],[58,99,42,16],[58,100,42,18,"c"],[58,101,42,19],[58,105,42,24],[59,10,43,12],[59,14,43,16],[59,18,43,20],[59,19,43,21,"test"],[59,23,43,25],[59,24,43,26,"c"],[59,25,43,27],[59,26,43,28],[59,30,43,32],[59,31,43,33,"quoted"],[59,37,43,39],[59,39,43,41],[60,12,44,16],[60,19,44,23],[60,21,44,25],[61,10,45,12],[62,10,46,12],[62,14,46,16,"c"],[62,15,46,17],[62,20,46,22],[62,23,46,25],[62,25,46,27],[63,12,47,16,"quoted"],[63,18,47,22],[63,21,47,25],[63,22,47,26,"quoted"],[63,28,47,32],[64,10,48,12],[65,10,49,12],[65,17,49,19,"c"],[65,18,49,20],[66,8,50,8],[66,9,50,9],[66,10,50,10],[66,11,51,13,"join"],[66,15,51,17],[66,16,51,18],[66,18,51,20],[66,19,51,21],[67,8,52,8],[67,12,52,12],[67,13,52,13,"url"],[67,16,52,16],[67,17,52,17,"searchParams"],[67,29,52,29],[67,30,52,30,"set"],[67,33,52,33],[67,34,52,34],[67,42,52,42],[67,44,52,44,"cleanedColumns"],[67,58,52,58],[67,59,52,59],[68,8,53,8],[68,12,53,12,"count"],[68,17,53,17],[68,19,53,19],[69,10,54,12],[69,14,54,16],[69,15,54,17,"headers"],[69,22,54,24],[69,23,54,25,"append"],[69,29,54,31],[69,30,54,32],[69,38,54,40],[69,40,54,42],[69,49,54,51,"count"],[69,54,54,56],[69,56,54,58],[69,57,54,59],[70,8,55,8],[71,8,56,8],[71,15,56,15],[71,19,56,19,"PostgrestFilterBuilder_1"],[71,43,56,43],[71,44,56,44,"default"],[71,51,56,51],[71,52,56,52],[72,10,57,12,"method"],[72,16,57,18],[73,10,58,12,"url"],[73,13,58,15],[73,15,58,17],[73,19,58,21],[73,20,58,22,"url"],[73,23,58,25],[74,10,59,12,"headers"],[74,17,59,19],[74,19,59,21],[74,23,59,25],[74,24,59,26,"headers"],[74,31,59,33],[75,10,60,12,"schema"],[75,16,60,18],[75,18,60,20],[75,22,60,24],[75,23,60,25,"schema"],[75,29,60,31],[76,10,61,12,"fetch"],[76,15,61,17],[76,17,61,19],[76,21,61,23],[76,22,61,24,"fetch"],[77,8,62,8],[77,9,62,9],[77,10,62,10],[78,6,63,4],[79,6,64,4],[80,0,65,0],[81,0,66,0],[82,0,67,0],[83,0,68,0],[84,0,69,0],[85,0,70,0],[86,0,71,0],[87,0,72,0],[88,0,73,0],[89,0,74,0],[90,0,75,0],[91,0,76,0],[92,0,77,0],[93,0,78,0],[94,0,79,0],[95,0,80,0],[96,0,81,0],[97,0,82,0],[98,0,83,0],[99,0,84,0],[100,0,85,0],[101,0,86,0],[102,0,87,0],[103,0,88,0],[104,0,89,0],[105,4,64,4],[106,6,64,4,"key"],[106,9,64,4],[107,6,64,4,"value"],[107,11,64,4],[107,13,90,4],[107,22,90,4,"insert"],[107,28,90,10,"insert"],[107,29,90,11,"values"],[107,35,90,17],[107,37,90,58],[108,8,90,58],[108,12,90,58,"_ref3"],[108,17,90,58],[108,20,90,58,"arguments"],[108,29,90,58],[108,30,90,58,"length"],[108,36,90,58],[108,44,90,58,"arguments"],[108,53,90,58],[108,61,90,58,"undefined"],[108,70,90,58],[108,73,90,58,"arguments"],[108,82,90,58],[108,88,90,54],[108,89,90,55],[108,90,90,56],[109,10,90,21,"count"],[109,15,90,26],[109,18,90,26,"_ref3"],[109,23,90,26],[109,24,90,21,"count"],[109,29,90,26],[110,10,90,26,"_ref3$defaultToNull"],[110,29,90,26],[110,32,90,26,"_ref3"],[110,37,90,26],[110,38,90,28,"defaultToNull"],[110,51,90,41],[111,10,90,28,"defaultToNull"],[111,23,90,41],[111,26,90,41,"_ref3$defaultToNull"],[111,45,90,41],[111,59,90,44],[111,63,90,48],[111,66,90,48,"_ref3$defaultToNull"],[111,85,90,48],[112,8,91,8],[112,12,91,12,"_a"],[112,14,91,14],[113,8,92,8],[113,12,92,14,"method"],[113,18,92,20],[113,21,92,23],[113,27,92,29],[114,8,93,8],[114,12,93,12,"count"],[114,17,93,17],[114,19,93,19],[115,10,94,12],[115,14,94,16],[115,15,94,17,"headers"],[115,22,94,24],[115,23,94,25,"append"],[115,29,94,31],[115,30,94,32],[115,38,94,40],[115,40,94,42],[115,49,94,51,"count"],[115,54,94,56],[115,56,94,58],[115,57,94,59],[116,8,95,8],[117,8,96,8],[117,12,96,12],[117,13,96,13,"defaultToNull"],[117,26,96,26],[117,28,96,28],[118,10,97,12],[118,14,97,16],[118,15,97,17,"headers"],[118,22,97,24],[118,23,97,25,"append"],[118,29,97,31],[118,30,97,32],[118,38,97,40],[118,40,97,42],[118,57,97,59],[118,58,97,60],[119,8,98,8],[120,8,99,8],[120,12,99,12,"Array"],[120,17,99,17],[120,18,99,18,"isArray"],[120,25,99,25],[120,26,99,26,"values"],[120,32,99,32],[120,33,99,33],[120,35,99,35],[121,10,100,12],[121,14,100,18,"columns"],[121,21,100,25],[121,24,100,28,"values"],[121,30,100,34],[121,31,100,35,"reduce"],[121,37,100,41],[121,38,100,42],[121,39,100,43,"acc"],[121,42,100,46],[121,44,100,48,"x"],[121,45,100,49],[121,50,100,54,"acc"],[121,53,100,57],[121,54,100,58,"concat"],[121,60,100,64],[121,61,100,65,"Object"],[121,67,100,71],[121,68,100,72,"keys"],[121,72,100,76],[121,73,100,77,"x"],[121,74,100,78],[121,75,100,79],[121,76,100,80],[121,78,100,82],[121,80,100,84],[121,81,100,85],[122,10,101,12],[122,14,101,16,"columns"],[122,21,101,23],[122,22,101,24,"length"],[122,28,101,30],[122,31,101,33],[122,32,101,34],[122,34,101,36],[123,12,102,16],[123,16,102,22,"uniqueColumns"],[123,29,102,35],[123,32,102,38],[123,33,102,39],[123,36,102,42],[123,40,102,46,"Set"],[123,43,102,49],[123,44,102,50,"columns"],[123,51,102,57],[123,52,102,58],[123,53,102,59],[123,54,102,60,"map"],[123,57,102,63],[123,58,102,65,"column"],[123,64,102,71],[123,68,102,76],[123,72,102,80,"column"],[123,78,102,86],[123,81,102,89],[123,82,102,90],[124,12,103,16],[124,16,103,20],[124,17,103,21,"url"],[124,20,103,24],[124,21,103,25,"searchParams"],[124,33,103,37],[124,34,103,38,"set"],[124,37,103,41],[124,38,103,42],[124,47,103,51],[124,49,103,53,"uniqueColumns"],[124,62,103,66],[124,63,103,67,"join"],[124,67,103,71],[124,68,103,72],[124,71,103,75],[124,72,103,76],[124,73,103,77],[125,10,104,12],[126,8,105,8],[127,8,106,8],[127,15,106,15],[127,19,106,19,"PostgrestFilterBuilder_1"],[127,43,106,43],[127,44,106,44,"default"],[127,51,106,51],[127,52,106,52],[128,10,107,12,"method"],[128,16,107,18],[129,10,108,12,"url"],[129,13,108,15],[129,15,108,17],[129,19,108,21],[129,20,108,22,"url"],[129,23,108,25],[130,10,109,12,"headers"],[130,17,109,19],[130,19,109,21],[130,23,109,25],[130,24,109,26,"headers"],[130,31,109,33],[131,10,110,12,"schema"],[131,16,110,18],[131,18,110,20],[131,22,110,24],[131,23,110,25,"schema"],[131,29,110,31],[132,10,111,12,"body"],[132,14,111,16],[132,16,111,18,"values"],[132,22,111,24],[133,10,112,12,"fetch"],[133,15,112,17],[133,17,112,19],[133,18,112,20,"_a"],[133,20,112,22],[133,23,112,25],[133,27,112,29],[133,28,112,30,"fetch"],[133,33,112,35],[133,39,112,41],[133,43,112,45],[133,47,112,49,"_a"],[133,49,112,51],[133,54,112,56],[133,59,112,61],[133,60,112,62],[133,63,112,65,"_a"],[133,65,112,67],[133,68,112,70,"fetch"],[134,8,113,8],[134,9,113,9],[134,10,113,10],[135,6,114,4],[136,6,115,4],[137,0,116,0],[138,0,117,0],[139,0,118,0],[140,0,119,0],[141,0,120,0],[142,0,121,0],[143,0,122,0],[144,0,123,0],[145,0,124,0],[146,0,125,0],[147,0,126,0],[148,0,127,0],[149,0,128,0],[150,0,129,0],[151,0,130,0],[152,0,131,0],[153,0,132,0],[154,0,133,0],[155,0,134,0],[156,0,135,0],[157,0,136,0],[158,0,137,0],[159,0,138,0],[160,0,139,0],[161,0,140,0],[162,0,141,0],[163,0,142,0],[164,0,143,0],[165,0,144,0],[166,0,145,0],[167,0,146,0],[168,0,147,0],[169,0,148,0],[170,0,149,0],[171,0,150,0],[172,0,151,0],[173,0,152,0],[174,4,115,4],[175,6,115,4,"key"],[175,9,115,4],[176,6,115,4,"value"],[176,11,115,4],[176,13,153,4],[176,22,153,4,"upsert"],[176,28,153,10,"upsert"],[176,29,153,11,"values"],[176,35,153,17],[176,37,153,96],[177,8,153,96],[177,12,153,96,"_ref4"],[177,17,153,96],[177,20,153,96,"arguments"],[177,29,153,96],[177,30,153,96,"length"],[177,36,153,96],[177,44,153,96,"arguments"],[177,53,153,96],[177,61,153,96,"undefined"],[177,70,153,96],[177,73,153,96,"arguments"],[177,82,153,96],[177,88,153,92],[177,89,153,93],[177,90,153,94],[178,10,153,21,"onConflict"],[178,20,153,31],[178,23,153,31,"_ref4"],[178,28,153,31],[178,29,153,21,"onConflict"],[178,39,153,31],[179,10,153,31,"_ref4$ignoreDuplicate"],[179,31,153,31],[179,34,153,31,"_ref4"],[179,39,153,31],[179,40,153,33,"ignoreDuplicates"],[179,56,153,49],[180,10,153,33,"ignoreDuplicates"],[180,26,153,49],[180,29,153,49,"_ref4$ignoreDuplicate"],[180,50,153,49],[180,64,153,52],[180,69,153,57],[180,72,153,57,"_ref4$ignoreDuplicate"],[180,93,153,57],[181,10,153,59,"count"],[181,15,153,64],[181,18,153,64,"_ref4"],[181,23,153,64],[181,24,153,59,"count"],[181,29,153,64],[182,10,153,64,"_ref4$defaultToNull"],[182,29,153,64],[182,32,153,64,"_ref4"],[182,37,153,64],[182,38,153,66,"defaultToNull"],[182,51,153,79],[183,10,153,66,"defaultToNull"],[183,23,153,79],[183,26,153,79,"_ref4$defaultToNull"],[183,45,153,79],[183,59,153,82],[183,63,153,86],[183,66,153,86,"_ref4$defaultToNull"],[183,85,153,86],[184,8,154,8],[184,12,154,12,"_a"],[184,14,154,14],[185,8,155,8],[185,12,155,14,"method"],[185,18,155,20],[185,21,155,23],[185,27,155,29],[186,8,156,8],[186,12,156,12],[186,13,156,13,"headers"],[186,20,156,20],[186,21,156,21,"append"],[186,27,156,27],[186,28,156,28],[186,36,156,36],[186,38,156,38],[186,52,156,52,"ignoreDuplicates"],[186,68,156,68],[186,71,156,71],[186,79,156,79],[186,82,156,82],[186,89,156,89],[186,102,156,102],[186,103,156,103],[187,8,157,8],[187,12,157,12,"onConflict"],[187,22,157,22],[187,27,157,27,"undefined"],[187,36,157,36],[187,38,158,12],[187,42,158,16],[187,43,158,17,"url"],[187,46,158,20],[187,47,158,21,"searchParams"],[187,59,158,33],[187,60,158,34,"set"],[187,63,158,37],[187,64,158,38],[187,77,158,51],[187,79,158,53,"onConflict"],[187,89,158,63],[187,90,158,64],[188,8,159,8],[188,12,159,12,"count"],[188,17,159,17],[188,19,159,19],[189,10,160,12],[189,14,160,16],[189,15,160,17,"headers"],[189,22,160,24],[189,23,160,25,"append"],[189,29,160,31],[189,30,160,32],[189,38,160,40],[189,40,160,42],[189,49,160,51,"count"],[189,54,160,56],[189,56,160,58],[189,57,160,59],[190,8,161,8],[191,8,162,8],[191,12,162,12],[191,13,162,13,"defaultToNull"],[191,26,162,26],[191,28,162,28],[192,10,163,12],[192,14,163,16],[192,15,163,17,"headers"],[192,22,163,24],[192,23,163,25,"append"],[192,29,163,31],[192,30,163,32],[192,38,163,40],[192,40,163,42],[192,57,163,59],[192,58,163,60],[193,8,164,8],[194,8,165,8],[194,12,165,12,"Array"],[194,17,165,17],[194,18,165,18,"isArray"],[194,25,165,25],[194,26,165,26,"values"],[194,32,165,32],[194,33,165,33],[194,35,165,35],[195,10,166,12],[195,14,166,18,"columns"],[195,21,166,25],[195,24,166,28,"values"],[195,30,166,34],[195,31,166,35,"reduce"],[195,37,166,41],[195,38,166,42],[195,39,166,43,"acc"],[195,42,166,46],[195,44,166,48,"x"],[195,45,166,49],[195,50,166,54,"acc"],[195,53,166,57],[195,54,166,58,"concat"],[195,60,166,64],[195,61,166,65,"Object"],[195,67,166,71],[195,68,166,72,"keys"],[195,72,166,76],[195,73,166,77,"x"],[195,74,166,78],[195,75,166,79],[195,76,166,80],[195,78,166,82],[195,80,166,84],[195,81,166,85],[196,10,167,12],[196,14,167,16,"columns"],[196,21,167,23],[196,22,167,24,"length"],[196,28,167,30],[196,31,167,33],[196,32,167,34],[196,34,167,36],[197,12,168,16],[197,16,168,22,"uniqueColumns"],[197,29,168,35],[197,32,168,38],[197,33,168,39],[197,36,168,42],[197,40,168,46,"Set"],[197,43,168,49],[197,44,168,50,"columns"],[197,51,168,57],[197,52,168,58],[197,53,168,59],[197,54,168,60,"map"],[197,57,168,63],[197,58,168,65,"column"],[197,64,168,71],[197,68,168,76],[197,72,168,80,"column"],[197,78,168,86],[197,81,168,89],[197,82,168,90],[198,12,169,16],[198,16,169,20],[198,17,169,21,"url"],[198,20,169,24],[198,21,169,25,"searchParams"],[198,33,169,37],[198,34,169,38,"set"],[198,37,169,41],[198,38,169,42],[198,47,169,51],[198,49,169,53,"uniqueColumns"],[198,62,169,66],[198,63,169,67,"join"],[198,67,169,71],[198,68,169,72],[198,71,169,75],[198,72,169,76],[198,73,169,77],[199,10,170,12],[200,8,171,8],[201,8,172,8],[201,15,172,15],[201,19,172,19,"PostgrestFilterBuilder_1"],[201,43,172,43],[201,44,172,44,"default"],[201,51,172,51],[201,52,172,52],[202,10,173,12,"method"],[202,16,173,18],[203,10,174,12,"url"],[203,13,174,15],[203,15,174,17],[203,19,174,21],[203,20,174,22,"url"],[203,23,174,25],[204,10,175,12,"headers"],[204,17,175,19],[204,19,175,21],[204,23,175,25],[204,24,175,26,"headers"],[204,31,175,33],[205,10,176,12,"schema"],[205,16,176,18],[205,18,176,20],[205,22,176,24],[205,23,176,25,"schema"],[205,29,176,31],[206,10,177,12,"body"],[206,14,177,16],[206,16,177,18,"values"],[206,22,177,24],[207,10,178,12,"fetch"],[207,15,178,17],[207,17,178,19],[207,18,178,20,"_a"],[207,20,178,22],[207,23,178,25],[207,27,178,29],[207,28,178,30,"fetch"],[207,33,178,35],[207,39,178,41],[207,43,178,45],[207,47,178,49,"_a"],[207,49,178,51],[207,54,178,56],[207,59,178,61],[207,60,178,62],[207,63,178,65,"_a"],[207,65,178,67],[207,68,178,70,"fetch"],[208,8,179,8],[208,9,179,9],[208,10,179,10],[209,6,180,4],[210,6,181,4],[211,0,182,0],[212,0,183,0],[213,0,184,0],[214,0,185,0],[215,0,186,0],[216,0,187,0],[217,0,188,0],[218,0,189,0],[219,0,190,0],[220,0,191,0],[221,0,192,0],[222,0,193,0],[223,0,194,0],[224,0,195,0],[225,0,196,0],[226,0,197,0],[227,0,198,0],[228,0,199,0],[229,0,200,0],[230,0,201,0],[231,4,181,4],[232,6,181,4,"key"],[232,9,181,4],[233,6,181,4,"value"],[233,11,181,4],[233,13,202,4],[233,22,202,4,"update"],[233,28,202,10,"update"],[233,29,202,11,"values"],[233,35,202,17],[233,37,202,36],[234,8,202,36],[234,12,202,36,"_ref5"],[234,17,202,36],[234,20,202,36,"arguments"],[234,29,202,36],[234,30,202,36,"length"],[234,36,202,36],[234,44,202,36,"arguments"],[234,53,202,36],[234,61,202,36,"undefined"],[234,70,202,36],[234,73,202,36,"arguments"],[234,82,202,36],[234,88,202,32],[234,89,202,33],[234,90,202,34],[235,10,202,21,"count"],[235,15,202,26],[235,18,202,26,"_ref5"],[235,23,202,26],[235,24,202,21,"count"],[235,29,202,26],[236,8,203,8],[236,12,203,12,"_a"],[236,14,203,14],[237,8,204,8],[237,12,204,14,"method"],[237,18,204,20],[237,21,204,23],[237,28,204,30],[238,8,205,8],[238,12,205,12,"count"],[238,17,205,17],[238,19,205,19],[239,10,206,12],[239,14,206,16],[239,15,206,17,"headers"],[239,22,206,24],[239,23,206,25,"append"],[239,29,206,31],[239,30,206,32],[239,38,206,40],[239,40,206,42],[239,49,206,51,"count"],[239,54,206,56],[239,56,206,58],[239,57,206,59],[240,8,207,8],[241,8,208,8],[241,15,208,15],[241,19,208,19,"PostgrestFilterBuilder_1"],[241,43,208,43],[241,44,208,44,"default"],[241,51,208,51],[241,52,208,52],[242,10,209,12,"method"],[242,16,209,18],[243,10,210,12,"url"],[243,13,210,15],[243,15,210,17],[243,19,210,21],[243,20,210,22,"url"],[243,23,210,25],[244,10,211,12,"headers"],[244,17,211,19],[244,19,211,21],[244,23,211,25],[244,24,211,26,"headers"],[244,31,211,33],[245,10,212,12,"schema"],[245,16,212,18],[245,18,212,20],[245,22,212,24],[245,23,212,25,"schema"],[245,29,212,31],[246,10,213,12,"body"],[246,14,213,16],[246,16,213,18,"values"],[246,22,213,24],[247,10,214,12,"fetch"],[247,15,214,17],[247,17,214,19],[247,18,214,20,"_a"],[247,20,214,22],[247,23,214,25],[247,27,214,29],[247,28,214,30,"fetch"],[247,33,214,35],[247,39,214,41],[247,43,214,45],[247,47,214,49,"_a"],[247,49,214,51],[247,54,214,56],[247,59,214,61],[247,60,214,62],[247,63,214,65,"_a"],[247,65,214,67],[247,68,214,70,"fetch"],[248,8,215,8],[248,9,215,9],[248,10,215,10],[249,6,216,4],[250,6,217,4],[251,0,218,0],[252,0,219,0],[253,0,220,0],[254,0,221,0],[255,0,222,0],[256,0,223,0],[257,0,224,0],[258,0,225,0],[259,0,226,0],[260,0,227,0],[261,0,228,0],[262,0,229,0],[263,0,230,0],[264,0,231,0],[265,0,232,0],[266,0,233,0],[267,0,234,0],[268,0,235,0],[269,4,217,4],[270,6,217,4,"key"],[270,9,217,4],[271,6,217,4,"value"],[271,11,217,4],[271,13,236,4],[271,22,236,4,"delete"],[271,29,236,10,"delete"],[271,30,236,10],[271,32,236,28],[272,8,236,28],[272,12,236,28,"_ref6"],[272,17,236,28],[272,20,236,28,"arguments"],[272,29,236,28],[272,30,236,28,"length"],[272,36,236,28],[272,44,236,28,"arguments"],[272,53,236,28],[272,61,236,28,"undefined"],[272,70,236,28],[272,73,236,28,"arguments"],[272,82,236,28],[272,88,236,24],[272,89,236,25],[272,90,236,26],[273,10,236,13,"count"],[273,15,236,18],[273,18,236,18,"_ref6"],[273,23,236,18],[273,24,236,13,"count"],[273,29,236,18],[274,8,237,8],[274,12,237,12,"_a"],[274,14,237,14],[275,8,238,8],[275,12,238,14,"method"],[275,18,238,20],[275,21,238,23],[275,29,238,31],[276,8,239,8],[276,12,239,12,"count"],[276,17,239,17],[276,19,239,19],[277,10,240,12],[277,14,240,16],[277,15,240,17,"headers"],[277,22,240,24],[277,23,240,25,"append"],[277,29,240,31],[277,30,240,32],[277,38,240,40],[277,40,240,42],[277,49,240,51,"count"],[277,54,240,56],[277,56,240,58],[277,57,240,59],[278,8,241,8],[279,8,242,8],[279,15,242,15],[279,19,242,19,"PostgrestFilterBuilder_1"],[279,43,242,43],[279,44,242,44,"default"],[279,51,242,51],[279,52,242,52],[280,10,243,12,"method"],[280,16,243,18],[281,10,244,12,"url"],[281,13,244,15],[281,15,244,17],[281,19,244,21],[281,20,244,22,"url"],[281,23,244,25],[282,10,245,12,"headers"],[282,17,245,19],[282,19,245,21],[282,23,245,25],[282,24,245,26,"headers"],[282,31,245,33],[283,10,246,12,"schema"],[283,16,246,18],[283,18,246,20],[283,22,246,24],[283,23,246,25,"schema"],[283,29,246,31],[284,10,247,12,"fetch"],[284,15,247,17],[284,17,247,19],[284,18,247,20,"_a"],[284,20,247,22],[284,23,247,25],[284,27,247,29],[284,28,247,30,"fetch"],[284,33,247,35],[284,39,247,41],[284,43,247,45],[284,47,247,49,"_a"],[284,49,247,51],[284,54,247,56],[284,59,247,61],[284,60,247,62],[284,63,247,65,"_a"],[284,65,247,67],[284,68,247,70,"fetch"],[285,8,248,8],[285,9,248,9],[285,10,248,10],[286,6,249,4],[287,4,249,5],[288,2,249,5],[289,2,251,0,"exports"],[289,9,251,7],[289,10,251,8,"default"],[289,17,251,15],[289,20,251,18,"PostgrestQueryBuilder"],[289,41,251,39],[290,0,251,40],[290,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCO;SDQ;KFa;II2B;0CCU,sCD;gEEE,yBF;KJY;IOuC;0CFa,sCE;gEDE,yBC;KPY;IQsB;KRc;ISoB;KTa;CFC"},"hasCjsExports":true},"type":"js/module"}]}