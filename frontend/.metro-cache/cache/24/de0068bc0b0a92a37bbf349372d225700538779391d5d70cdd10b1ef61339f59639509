{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"PostgresTypes\", {\n    enumerable: true,\n    get: function () {\n      return PostgresTypes;\n    }\n  });\n  Object.defineProperty(exports, \"convertChangeData\", {\n    enumerable: true,\n    get: function () {\n      return convertChangeData;\n    }\n  });\n  Object.defineProperty(exports, \"convertColumn\", {\n    enumerable: true,\n    get: function () {\n      return convertColumn;\n    }\n  });\n  Object.defineProperty(exports, \"convertCell\", {\n    enumerable: true,\n    get: function () {\n      return convertCell;\n    }\n  });\n  Object.defineProperty(exports, \"toBoolean\", {\n    enumerable: true,\n    get: function () {\n      return toBoolean;\n    }\n  });\n  Object.defineProperty(exports, \"toNumber\", {\n    enumerable: true,\n    get: function () {\n      return toNumber;\n    }\n  });\n  Object.defineProperty(exports, \"toJson\", {\n    enumerable: true,\n    get: function () {\n      return toJson;\n    }\n  });\n  Object.defineProperty(exports, \"toArray\", {\n    enumerable: true,\n    get: function () {\n      return toArray;\n    }\n  });\n  Object.defineProperty(exports, \"toTimestampString\", {\n    enumerable: true,\n    get: function () {\n      return toTimestampString;\n    }\n  });\n  Object.defineProperty(exports, \"httpEndpointURL\", {\n    enumerable: true,\n    get: function () {\n      return httpEndpointURL;\n    }\n  });\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    if (!record) {\n      return {};\n    }\n    return Object.keys(record).reduce((acc, rec_key) => {\n      acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find(x => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return convertCell(colType, value);\n    }\n    return noop(value);\n  };\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      const dataType = type.slice(1, type.length);\n      return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return toBoolean(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return toNumber(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return toJson(value);\n      case PostgresTypes.timestamp:\n        return toTimestampString(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  const noop = value => {\n    return value;\n  };\n  const toBoolean = value => {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  const toNumber = value => {\n    if (typeof value === 'string') {\n      const parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  const toJson = value => {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      let arr;\n      const valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(val => convertCell(type, val));\n    }\n    return value;\n  };\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  const toTimestampString = value => {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  const httpEndpointURL = socketUrl => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\n  };\n});","lineCount":285,"map":[[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"PostgresTypes"],[10,26,6,0],[11,4,6,0],[12,2,6,0],[13,2,45,0,"Object"],[13,8,45,0],[13,9,45,0,"defineProperty"],[13,23,45,0],[13,24,45,0,"exports"],[13,31,45,0],[14,4,45,0,"enumerable"],[14,14,45,0],[15,4,45,0,"get"],[15,7,45,0],[15,18,45,0,"get"],[15,19,45,0],[16,6,45,0],[16,13,45,0,"convertChangeData"],[16,30,45,0],[17,4,45,0],[18,2,45,0],[19,2,70,0,"Object"],[19,8,70,0],[19,9,70,0,"defineProperty"],[19,23,70,0],[19,24,70,0,"exports"],[19,31,70,0],[20,4,70,0,"enumerable"],[20,14,70,0],[21,4,70,0,"get"],[21,7,70,0],[21,18,70,0,"get"],[21,19,70,0],[22,6,70,0],[22,13,70,0,"convertColumn"],[22,26,70,0],[23,4,70,0],[24,2,70,0],[25,2,92,0,"Object"],[25,8,92,0],[25,9,92,0,"defineProperty"],[25,23,92,0],[25,24,92,0,"exports"],[25,31,92,0],[26,4,92,0,"enumerable"],[26,14,92,0],[27,4,92,0,"get"],[27,7,92,0],[27,18,92,0,"get"],[27,19,92,0],[28,6,92,0],[28,13,92,0,"convertCell"],[28,24,92,0],[29,4,92,0],[30,2,92,0],[31,2,137,0,"Object"],[31,8,137,0],[31,9,137,0,"defineProperty"],[31,23,137,0],[31,24,137,0,"exports"],[31,31,137,0],[32,4,137,0,"enumerable"],[32,14,137,0],[33,4,137,0,"get"],[33,7,137,0],[33,18,137,0,"get"],[33,19,137,0],[34,6,137,0],[34,13,137,0,"toBoolean"],[34,22,137,0],[35,4,137,0],[36,2,137,0],[37,2,147,0,"Object"],[37,8,147,0],[37,9,147,0,"defineProperty"],[37,23,147,0],[37,24,147,0,"exports"],[37,31,147,0],[38,4,147,0,"enumerable"],[38,14,147,0],[39,4,147,0,"get"],[39,7,147,0],[39,18,147,0,"get"],[39,19,147,0],[40,6,147,0],[40,13,147,0,"toNumber"],[40,21,147,0],[41,4,147,0],[42,2,147,0],[43,2,156,0,"Object"],[43,8,156,0],[43,9,156,0,"defineProperty"],[43,23,156,0],[43,24,156,0,"exports"],[43,31,156,0],[44,4,156,0,"enumerable"],[44,14,156,0],[45,4,156,0,"get"],[45,7,156,0],[45,18,156,0,"get"],[45,19,156,0],[46,6,156,0],[46,13,156,0,"toJson"],[46,19,156,0],[47,4,156,0],[48,2,156,0],[49,2,178,0,"Object"],[49,8,178,0],[49,9,178,0,"defineProperty"],[49,23,178,0],[49,24,178,0,"exports"],[49,31,178,0],[50,4,178,0,"enumerable"],[50,14,178,0],[51,4,178,0,"get"],[51,7,178,0],[51,18,178,0,"get"],[51,19,178,0],[52,6,178,0],[52,13,178,0,"toArray"],[52,20,178,0],[53,4,178,0],[54,2,178,0],[55,2,208,0,"Object"],[55,8,208,0],[55,9,208,0,"defineProperty"],[55,23,208,0],[55,24,208,0,"exports"],[55,31,208,0],[56,4,208,0,"enumerable"],[56,14,208,0],[57,4,208,0,"get"],[57,7,208,0],[57,18,208,0,"get"],[57,19,208,0],[58,6,208,0],[58,13,208,0,"toTimestampString"],[58,30,208,0],[59,4,208,0],[60,2,208,0],[61,2,214,0,"Object"],[61,8,214,0],[61,9,214,0,"defineProperty"],[61,23,214,0],[61,24,214,0,"exports"],[61,31,214,0],[62,4,214,0,"enumerable"],[62,14,214,0],[63,4,214,0,"get"],[63,7,214,0],[63,18,214,0,"get"],[63,19,214,0],[64,6,214,0],[64,13,214,0,"httpEndpointURL"],[64,28,214,0],[65,4,214,0],[66,2,214,0],[67,2,1,0],[68,0,2,0],[69,0,3,0],[70,2,4,0],[71,2,5,0],[72,2,6,7],[72,6,6,11,"PostgresTypes"],[72,19,6,24],[73,2,7,0],[73,3,7,1],[73,13,7,11,"PostgresTypes"],[73,26,7,24],[73,28,7,26],[74,4,8,4,"PostgresTypes"],[74,17,8,17],[74,18,8,18],[74,27,8,27],[74,28,8,28],[74,31,8,31],[74,40,8,40],[75,4,9,4,"PostgresTypes"],[75,17,9,17],[75,18,9,18],[75,24,9,24],[75,25,9,25],[75,28,9,28],[75,34,9,34],[76,4,10,4,"PostgresTypes"],[76,17,10,17],[76,18,10,18],[76,24,10,24],[76,25,10,25],[76,28,10,28],[76,34,10,34],[77,4,11,4,"PostgresTypes"],[77,17,11,17],[77,18,11,18],[77,29,11,29],[77,30,11,30],[77,33,11,33],[77,44,11,44],[78,4,12,4,"PostgresTypes"],[78,17,12,17],[78,18,12,18],[78,26,12,26],[78,27,12,27],[78,30,12,30],[78,38,12,38],[79,4,13,4,"PostgresTypes"],[79,17,13,17],[79,18,13,18],[79,26,13,26],[79,27,13,27],[79,30,13,30],[79,38,13,38],[80,4,14,4,"PostgresTypes"],[80,17,14,17],[80,18,14,18],[80,24,14,24],[80,25,14,25],[80,28,14,28],[80,34,14,34],[81,4,15,4,"PostgresTypes"],[81,17,15,17],[81,18,15,18],[81,24,15,24],[81,25,15,25],[81,28,15,28],[81,34,15,34],[82,4,16,4,"PostgresTypes"],[82,17,16,17],[82,18,16,18],[82,29,16,29],[82,30,16,30],[82,33,16,33],[82,44,16,44],[83,4,17,4,"PostgresTypes"],[83,17,17,17],[83,18,17,18],[83,24,17,24],[83,25,17,25],[83,28,17,28],[83,34,17,34],[84,4,18,4,"PostgresTypes"],[84,17,18,17],[84,18,18,18],[84,29,18,29],[84,30,18,30],[84,33,18,33],[84,44,18,44],[85,4,19,4,"PostgresTypes"],[85,17,19,17],[85,18,19,18],[85,24,19,24],[85,25,19,25],[85,28,19,28],[85,34,19,34],[86,4,20,4,"PostgresTypes"],[86,17,20,17],[86,18,20,18],[86,25,20,25],[86,26,20,26],[86,29,20,29],[86,36,20,36],[87,4,21,4,"PostgresTypes"],[87,17,21,17],[87,18,21,18],[87,25,21,25],[87,26,21,26],[87,29,21,29],[87,36,21,36],[88,4,22,4,"PostgresTypes"],[88,17,22,17],[88,18,22,18],[88,27,22,27],[88,28,22,28],[88,31,22,31],[88,40,22,40],[89,4,23,4,"PostgresTypes"],[89,17,23,17],[89,18,23,18],[89,23,23,23],[89,24,23,24],[89,27,23,27],[89,32,23,32],[90,4,24,4,"PostgresTypes"],[90,17,24,17],[90,18,24,18],[90,27,24,27],[90,28,24,28],[90,31,24,31],[90,40,24,40],[91,4,25,4,"PostgresTypes"],[91,17,25,17],[91,18,25,18],[91,24,25,24],[91,25,25,25],[91,28,25,28],[91,34,25,34],[92,4,26,4,"PostgresTypes"],[92,17,26,17],[92,18,26,18],[92,24,26,24],[92,25,26,25],[92,28,26,28],[92,34,26,34],[93,4,27,4,"PostgresTypes"],[93,17,27,17],[93,18,27,18],[93,29,27,29],[93,30,27,30],[93,33,27,33],[93,44,27,44],[94,4,28,4,"PostgresTypes"],[94,17,28,17],[94,18,28,18],[94,31,28,31],[94,32,28,32],[94,35,28,35],[94,48,28,48],[95,4,29,4,"PostgresTypes"],[95,17,29,17],[95,18,29,18],[95,26,29,26],[95,27,29,27],[95,30,29,30],[95,38,29,38],[96,4,30,4,"PostgresTypes"],[96,17,30,17],[96,18,30,18],[96,27,30,27],[96,28,30,28],[96,31,30,31],[96,40,30,40],[97,4,31,4,"PostgresTypes"],[97,17,31,17],[97,18,31,18],[97,29,31,29],[97,30,31,30],[97,33,31,33],[97,44,31,44],[98,2,32,0],[98,3,32,1],[98,5,32,3,"PostgresTypes"],[98,18,32,16],[98,23,32,21,"PostgresTypes"],[98,36,32,34],[98,39,32,37],[98,40,32,38],[98,41,32,39],[98,42,32,40],[98,43,32,41],[99,2,33,0],[100,0,34,0],[101,0,35,0],[102,0,36,0],[103,0,37,0],[104,0,38,0],[105,0,39,0],[106,0,40,0],[107,0,41,0],[108,0,42,0],[109,0,43,0],[110,0,44,0],[111,2,45,7],[111,8,45,13,"convertChangeData"],[111,25,45,30],[111,28,45,33,"convertChangeData"],[111,29,45,34,"columns"],[111,36,45,41],[111,38,45,43,"record"],[111,44,45,49],[111,46,45,51,"options"],[111,53,45,58],[111,56,45,61],[111,57,45,62],[111,58,45,63],[111,63,45,68],[112,4,46,4],[112,8,46,8,"_a"],[112,10,46,10],[113,4,47,4],[113,10,47,10,"skipTypes"],[113,19,47,19],[113,22,47,22],[113,23,47,23,"_a"],[113,25,47,25],[113,28,47,28,"options"],[113,35,47,35],[113,36,47,36,"skipTypes"],[113,45,47,45],[113,51,47,51],[113,55,47,55],[113,59,47,59,"_a"],[113,61,47,61],[113,66,47,66],[113,71,47,71],[113,72,47,72],[113,75,47,75,"_a"],[113,77,47,77],[113,80,47,80],[113,82,47,82],[114,4,48,4],[114,8,48,8],[114,9,48,9,"record"],[114,15,48,15],[114,17,48,17],[115,6,49,8],[115,13,49,15],[115,14,49,16],[115,15,49,17],[116,4,50,4],[117,4,51,4],[117,11,51,11,"Object"],[117,17,51,17],[117,18,51,18,"keys"],[117,22,51,22],[117,23,51,23,"record"],[117,29,51,29],[117,30,51,30],[117,31,51,31,"reduce"],[117,37,51,37],[117,38,51,38],[117,39,51,39,"acc"],[117,42,51,42],[117,44,51,44,"rec_key"],[117,51,51,51],[117,56,51,56],[118,6,52,8,"acc"],[118,9,52,11],[118,10,52,12,"rec_key"],[118,17,52,19],[118,18,52,20],[118,21,52,23,"convertColumn"],[118,34,52,36],[118,35,52,37,"rec_key"],[118,42,52,44],[118,44,52,46,"columns"],[118,51,52,53],[118,53,52,55,"record"],[118,59,52,61],[118,61,52,63,"skipTypes"],[118,70,52,72],[118,71,52,73],[119,6,53,8],[119,13,53,15,"acc"],[119,16,53,18],[120,4,54,4],[120,5,54,5],[120,7,54,7],[120,8,54,8],[120,9,54,9],[120,10,54,10],[121,2,55,0],[121,3,55,1],[122,2,56,0],[123,0,57,0],[124,0,58,0],[125,0,59,0],[126,0,60,0],[127,0,61,0],[128,0,62,0],[129,0,63,0],[130,0,64,0],[131,0,65,0],[132,0,66,0],[133,0,67,0],[134,0,68,0],[135,0,69,0],[136,2,70,7],[136,8,70,13,"convertColumn"],[136,21,70,26],[136,24,70,29,"convertColumn"],[136,25,70,30,"columnName"],[136,35,70,40],[136,37,70,42,"columns"],[136,44,70,49],[136,46,70,51,"record"],[136,52,70,57],[136,54,70,59,"skipTypes"],[136,63,70,68],[136,68,70,73],[137,4,71,4],[137,10,71,10,"column"],[137,16,71,16],[137,19,71,19,"columns"],[137,26,71,26],[137,27,71,27,"find"],[137,31,71,31],[137,32,71,33,"x"],[137,33,71,34],[137,37,71,39,"x"],[137,38,71,40],[137,39,71,41,"name"],[137,43,71,45],[137,48,71,50,"columnName"],[137,58,71,60],[137,59,71,61],[138,4,72,4],[138,10,72,10,"colType"],[138,17,72,17],[138,20,72,20,"column"],[138,26,72,26],[138,31,72,31],[138,35,72,35],[138,39,72,39,"column"],[138,45,72,45],[138,50,72,50],[138,55,72,55],[138,56,72,56],[138,59,72,59],[138,64,72,64],[138,65,72,65],[138,68,72,68,"column"],[138,74,72,74],[138,75,72,75,"type"],[138,79,72,79],[139,4,73,4],[139,10,73,10,"value"],[139,15,73,15],[139,18,73,18,"record"],[139,24,73,24],[139,25,73,25,"columnName"],[139,35,73,35],[139,36,73,36],[140,4,74,4],[140,8,74,8,"colType"],[140,15,74,15],[140,19,74,19],[140,20,74,20,"skipTypes"],[140,29,74,29],[140,30,74,30,"includes"],[140,38,74,38],[140,39,74,39,"colType"],[140,46,74,46],[140,47,74,47],[140,49,74,49],[141,6,75,8],[141,13,75,15,"convertCell"],[141,24,75,26],[141,25,75,27,"colType"],[141,32,75,34],[141,34,75,36,"value"],[141,39,75,41],[141,40,75,42],[142,4,76,4],[143,4,77,4],[143,11,77,11,"noop"],[143,15,77,15],[143,16,77,16,"value"],[143,21,77,21],[143,22,77,22],[144,2,78,0],[144,3,78,1],[145,2,79,0],[146,0,80,0],[147,0,81,0],[148,0,82,0],[149,0,83,0],[150,0,84,0],[151,0,85,0],[152,0,86,0],[153,0,87,0],[154,0,88,0],[155,0,89,0],[156,0,90,0],[157,0,91,0],[158,2,92,7],[158,8,92,13,"convertCell"],[158,19,92,24],[158,22,92,27,"convertCell"],[158,23,92,28,"type"],[158,27,92,32],[158,29,92,34,"value"],[158,34,92,39],[158,39,92,44],[159,4,93,4],[160,4,94,4],[160,8,94,8,"type"],[160,12,94,12],[160,13,94,13,"charAt"],[160,19,94,19],[160,20,94,20],[160,21,94,21],[160,22,94,22],[160,27,94,27],[160,30,94,30],[160,32,94,32],[161,6,95,8],[161,12,95,14,"dataType"],[161,20,95,22],[161,23,95,25,"type"],[161,27,95,29],[161,28,95,30,"slice"],[161,33,95,35],[161,34,95,36],[161,35,95,37],[161,37,95,39,"type"],[161,41,95,43],[161,42,95,44,"length"],[161,48,95,50],[161,49,95,51],[162,6,96,8],[162,13,96,15,"toArray"],[162,20,96,22],[162,21,96,23,"value"],[162,26,96,28],[162,28,96,30,"dataType"],[162,36,96,38],[162,37,96,39],[163,4,97,4],[164,4,98,4],[165,4,99,4],[165,12,99,12,"type"],[165,16,99,16],[166,6,100,8],[166,11,100,13,"PostgresTypes"],[166,24,100,26],[166,25,100,27,"bool"],[166,29,100,31],[167,8,101,12],[167,15,101,19,"toBoolean"],[167,24,101,28],[167,25,101,29,"value"],[167,30,101,34],[167,31,101,35],[168,6,102,8],[168,11,102,13,"PostgresTypes"],[168,24,102,26],[168,25,102,27,"float4"],[168,31,102,33],[169,6,103,8],[169,11,103,13,"PostgresTypes"],[169,24,103,26],[169,25,103,27,"float8"],[169,31,103,33],[170,6,104,8],[170,11,104,13,"PostgresTypes"],[170,24,104,26],[170,25,104,27,"int2"],[170,29,104,31],[171,6,105,8],[171,11,105,13,"PostgresTypes"],[171,24,105,26],[171,25,105,27,"int4"],[171,29,105,31],[172,6,106,8],[172,11,106,13,"PostgresTypes"],[172,24,106,26],[172,25,106,27,"int8"],[172,29,106,31],[173,6,107,8],[173,11,107,13,"PostgresTypes"],[173,24,107,26],[173,25,107,27,"numeric"],[173,32,107,34],[174,6,108,8],[174,11,108,13,"PostgresTypes"],[174,24,108,26],[174,25,108,27,"oid"],[174,28,108,30],[175,8,109,12],[175,15,109,19,"toNumber"],[175,23,109,27],[175,24,109,28,"value"],[175,29,109,33],[175,30,109,34],[176,6,110,8],[176,11,110,13,"PostgresTypes"],[176,24,110,26],[176,25,110,27,"json"],[176,29,110,31],[177,6,111,8],[177,11,111,13,"PostgresTypes"],[177,24,111,26],[177,25,111,27,"jsonb"],[177,30,111,32],[178,8,112,12],[178,15,112,19,"toJson"],[178,21,112,25],[178,22,112,26,"value"],[178,27,112,31],[178,28,112,32],[179,6,113,8],[179,11,113,13,"PostgresTypes"],[179,24,113,26],[179,25,113,27,"timestamp"],[179,34,113,36],[180,8,114,12],[180,15,114,19,"toTimestampString"],[180,32,114,36],[180,33,114,37,"value"],[180,38,114,42],[180,39,114,43],[181,6,114,45],[182,6,115,8],[182,11,115,13,"PostgresTypes"],[182,24,115,26],[182,25,115,27,"abstime"],[182,32,115,34],[182,33,115,35],[182,34,115,36],[183,6,116,8],[183,11,116,13,"PostgresTypes"],[183,24,116,26],[183,25,116,27,"date"],[183,29,116,31],[183,30,116,32],[183,31,116,33],[184,6,117,8],[184,11,117,13,"PostgresTypes"],[184,24,117,26],[184,25,117,27,"daterange"],[184,34,117,36],[185,6,118,8],[185,11,118,13,"PostgresTypes"],[185,24,118,26],[185,25,118,27,"int4range"],[185,34,118,36],[186,6,119,8],[186,11,119,13,"PostgresTypes"],[186,24,119,26],[186,25,119,27,"int8range"],[186,34,119,36],[187,6,120,8],[187,11,120,13,"PostgresTypes"],[187,24,120,26],[187,25,120,27,"money"],[187,30,120,32],[188,6,121,8],[188,11,121,13,"PostgresTypes"],[188,24,121,26],[188,25,121,27,"reltime"],[188,32,121,34],[188,33,121,35],[188,34,121,36],[189,6,122,8],[189,11,122,13,"PostgresTypes"],[189,24,122,26],[189,25,122,27,"text"],[189,29,122,31],[190,6,123,8],[190,11,123,13,"PostgresTypes"],[190,24,123,26],[190,25,123,27,"time"],[190,29,123,31],[190,30,123,32],[190,31,123,33],[191,6,124,8],[191,11,124,13,"PostgresTypes"],[191,24,124,26],[191,25,124,27,"timestamptz"],[191,36,124,38],[191,37,124,39],[191,38,124,40],[192,6,125,8],[192,11,125,13,"PostgresTypes"],[192,24,125,26],[192,25,125,27,"timetz"],[192,31,125,33],[192,32,125,34],[192,33,125,35],[193,6,126,8],[193,11,126,13,"PostgresTypes"],[193,24,126,26],[193,25,126,27,"tsrange"],[193,32,126,34],[194,6,127,8],[194,11,127,13,"PostgresTypes"],[194,24,127,26],[194,25,127,27,"tstzrange"],[194,34,127,36],[195,8,128,12],[195,15,128,19,"noop"],[195,19,128,23],[195,20,128,24,"value"],[195,25,128,29],[195,26,128,30],[196,6,129,8],[197,8,130,12],[198,8,131,12],[198,15,131,19,"noop"],[198,19,131,23],[198,20,131,24,"value"],[198,25,131,29],[198,26,131,30],[199,4,132,4],[200,2,133,0],[200,3,133,1],[201,2,134,0],[201,8,134,6,"noop"],[201,12,134,10],[201,15,134,14,"value"],[201,20,134,19],[201,24,134,24],[202,4,135,4],[202,11,135,11,"value"],[202,16,135,16],[203,2,136,0],[203,3,136,1],[204,2,137,7],[204,8,137,13,"toBoolean"],[204,17,137,22],[204,20,137,26,"value"],[204,25,137,31],[204,29,137,36],[205,4,138,4],[205,12,138,12,"value"],[205,17,138,17],[206,6,139,8],[206,11,139,13],[206,14,139,16],[207,8,140,12],[207,15,140,19],[207,19,140,23],[208,6,141,8],[208,11,141,13],[208,14,141,16],[209,8,142,12],[209,15,142,19],[209,20,142,24],[210,6,143,8],[211,8,144,12],[211,15,144,19,"value"],[211,20,144,24],[212,4,145,4],[213,2,146,0],[213,3,146,1],[214,2,147,7],[214,8,147,13,"toNumber"],[214,16,147,21],[214,19,147,25,"value"],[214,24,147,30],[214,28,147,35],[215,4,148,4],[215,8,148,8],[215,15,148,15,"value"],[215,20,148,20],[215,25,148,25],[215,33,148,33],[215,35,148,35],[216,6,149,8],[216,12,149,14,"parsedValue"],[216,23,149,25],[216,26,149,28,"parseFloat"],[216,36,149,38],[216,37,149,39,"value"],[216,42,149,44],[216,43,149,45],[217,6,150,8],[217,10,150,12],[217,11,150,13,"Number"],[217,17,150,19],[217,18,150,20,"isNaN"],[217,23,150,25],[217,24,150,26,"parsedValue"],[217,35,150,37],[217,36,150,38],[217,38,150,40],[218,8,151,12],[218,15,151,19,"parsedValue"],[218,26,151,30],[219,6,152,8],[220,4,153,4],[221,4,154,4],[221,11,154,11,"value"],[221,16,154,16],[222,2,155,0],[222,3,155,1],[223,2,156,7],[223,8,156,13,"toJson"],[223,14,156,19],[223,17,156,23,"value"],[223,22,156,28],[223,26,156,33],[224,4,157,4],[224,8,157,8],[224,15,157,15,"value"],[224,20,157,20],[224,25,157,25],[224,33,157,33],[224,35,157,35],[225,6,158,8],[225,10,158,12],[226,8,159,12],[226,15,159,19,"JSON"],[226,19,159,23],[226,20,159,24,"parse"],[226,25,159,29],[226,26,159,30,"value"],[226,31,159,35],[226,32,159,36],[227,6,160,8],[227,7,160,9],[227,8,161,8],[227,15,161,15,"error"],[227,20,161,20],[227,22,161,22],[228,8,162,12,"console"],[228,15,162,19],[228,16,162,20,"log"],[228,19,162,23],[228,20,162,24],[228,41,162,45,"error"],[228,46,162,50],[228,48,162,52],[228,49,162,53],[229,8,163,12],[229,15,163,19,"value"],[229,20,163,24],[230,6,164,8],[231,4,165,4],[232,4,166,4],[232,11,166,11,"value"],[232,16,166,16],[233,2,167,0],[233,3,167,1],[234,2,168,0],[235,0,169,0],[236,0,170,0],[237,0,171,0],[238,0,172,0],[239,0,173,0],[240,0,174,0],[241,0,175,0],[242,0,176,0],[243,0,177,0],[244,2,178,7],[244,8,178,13,"toArray"],[244,15,178,20],[244,18,178,23,"toArray"],[244,19,178,24,"value"],[244,24,178,29],[244,26,178,31,"type"],[244,30,178,35],[244,35,178,40],[245,4,179,4],[245,8,179,8],[245,15,179,15,"value"],[245,20,179,20],[245,25,179,25],[245,33,179,33],[245,35,179,35],[246,6,180,8],[246,13,180,15,"value"],[246,18,180,20],[247,4,181,4],[248,4,182,4],[248,10,182,10,"lastIdx"],[248,17,182,17],[248,20,182,20,"value"],[248,25,182,25],[248,26,182,26,"length"],[248,32,182,32],[248,35,182,35],[248,36,182,36],[249,4,183,4],[249,10,183,10,"closeBrace"],[249,20,183,20],[249,23,183,23,"value"],[249,28,183,28],[249,29,183,29,"lastIdx"],[249,36,183,36],[249,37,183,37],[250,4,184,4],[250,10,184,10,"openBrace"],[250,19,184,19],[250,22,184,22,"value"],[250,27,184,27],[250,28,184,28],[250,29,184,29],[250,30,184,30],[251,4,185,4],[252,4,186,4],[252,8,186,8,"openBrace"],[252,17,186,17],[252,22,186,22],[252,25,186,25],[252,29,186,29,"closeBrace"],[252,39,186,39],[252,44,186,44],[252,47,186,47],[252,49,186,49],[253,6,187,8],[253,10,187,12,"arr"],[253,13,187,15],[254,6,188,8],[254,12,188,14,"valTrim"],[254,19,188,21],[254,22,188,24,"value"],[254,27,188,29],[254,28,188,30,"slice"],[254,33,188,35],[254,34,188,36],[254,35,188,37],[254,37,188,39,"lastIdx"],[254,44,188,46],[254,45,188,47],[255,6,189,8],[256,6,190,8],[256,10,190,12],[257,8,191,12,"arr"],[257,11,191,15],[257,14,191,18,"JSON"],[257,18,191,22],[257,19,191,23,"parse"],[257,24,191,28],[257,25,191,29],[257,28,191,32],[257,31,191,35,"valTrim"],[257,38,191,42],[257,41,191,45],[257,44,191,48],[257,45,191,49],[258,6,192,8],[258,7,192,9],[258,8,193,8],[258,15,193,15,"_"],[258,16,193,16],[258,18,193,18],[259,8,194,12],[260,8,195,12,"arr"],[260,11,195,15],[260,14,195,18,"valTrim"],[260,21,195,25],[260,24,195,28,"valTrim"],[260,31,195,35],[260,32,195,36,"split"],[260,37,195,41],[260,38,195,42],[260,41,195,45],[260,42,195,46],[260,45,195,49],[260,47,195,51],[261,6,196,8],[262,6,197,8],[262,13,197,15,"arr"],[262,16,197,18],[262,17,197,19,"map"],[262,20,197,22],[262,21,197,24,"val"],[262,24,197,27],[262,28,197,32,"convertCell"],[262,39,197,43],[262,40,197,44,"type"],[262,44,197,48],[262,46,197,50,"val"],[262,49,197,53],[262,50,197,54],[262,51,197,55],[263,4,198,4],[264,4,199,4],[264,11,199,11,"value"],[264,16,199,16],[265,2,200,0],[265,3,200,1],[266,2,201,0],[267,0,202,0],[268,0,203,0],[269,0,204,0],[270,0,205,0],[271,0,206,0],[272,0,207,0],[273,2,208,7],[273,8,208,13,"toTimestampString"],[273,25,208,30],[273,28,208,34,"value"],[273,33,208,39],[273,37,208,44],[274,4,209,4],[274,8,209,8],[274,15,209,15,"value"],[274,20,209,20],[274,25,209,25],[274,33,209,33],[274,35,209,35],[275,6,210,8],[275,13,210,15,"value"],[275,18,210,20],[275,19,210,21,"replace"],[275,26,210,28],[275,27,210,29],[275,30,210,32],[275,32,210,34],[275,35,210,37],[275,36,210,38],[276,4,211,4],[277,4,212,4],[277,11,212,11,"value"],[277,16,212,16],[278,2,213,0],[278,3,213,1],[279,2,214,7],[279,8,214,13,"httpEndpointURL"],[279,23,214,28],[279,26,214,32,"socketUrl"],[279,35,214,41],[279,39,214,46],[280,4,215,4],[280,8,215,8,"url"],[280,11,215,11],[280,14,215,14,"socketUrl"],[280,23,215,23],[281,4,216,4,"url"],[281,7,216,7],[281,10,216,10,"url"],[281,13,216,13],[281,14,216,14,"replace"],[281,21,216,21],[281,22,216,22],[281,28,216,28],[281,30,216,30],[281,36,216,36],[281,37,216,37],[282,4,217,4,"url"],[282,7,217,7],[282,10,217,10,"url"],[282,13,217,13],[282,14,217,14,"replace"],[282,21,217,21],[282,22,217,22],[282,71,217,71],[282,73,217,73],[282,75,217,75],[282,76,217,76],[283,4,218,4],[283,11,218,11,"url"],[283,14,218,14],[283,15,218,15,"replace"],[283,22,218,22],[283,23,218,23],[283,29,218,29],[283,31,218,31],[283,33,218,33],[283,34,218,34],[283,37,218,37],[283,53,218,53],[284,2,219,0],[284,3,219,1],[285,0,219,2],[285,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCM;CDyB;iCEa;sCCM;KDG;CFC;6BIe;gCCC,4BD;CJO;2BMc;CNyC;aOC;CPE;yBQC;CRS;wBSC;CTQ;sBUC;CVW;uBWW;uBCmB,+BD;CXG;iCaQ;CbK;+BcC;CdK"},"hasCjsExports":false},"type":"js/module"}]}